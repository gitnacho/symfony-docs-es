Instalando el recinto de seguridad del ``CMF``
==============================================

Esta guía muestra cómo instalar el recinto de seguridad del *CMF* de *Symfony*, una demostración de la plataforma dirigida a exhibir las características básicas de la herramienta corriendo en un entorno ``demo``.
La puedes usar para evaluar la plataforma o para ver código real en acción, ayudándote a entender la herramienta.

Si bien lo puedes utilizar tal cual, este recinto de seguridad no pretende ser una plataforma de desarrollo. Si estás buscando instrucciones de instalación para una configuración de desarrollo, por favor revisa:

- la página :doc:`../getting-started/installing-symfony-cmf` para instrucciones sobre cómo instalar rápidamente el *CMF* (recomendado para desarrollo)
- :doc:`../tutorials/installing-cmf-core` para una instalación paso a paso y detalles de configuración (si quieres conocer todos los detalles)

.. index:: sandbox, instalación, recinto de seguridad

Requisitos previos
------------------

Debido a que el ``CMF`` de *Symfony* está basado en *Symfony2*, deberías asegurarte de que cubres los `Requisitos para que funcione Symfony2 <http://gitnacho.github.com/symfony-docs-es/reference/requirements.html>`_.
`Git 1.6+ <http://git-scm.com/>`_, `Curl <http://curl.haxx.se/>`_ y *PHP* ``Intl`` también son necesarios para seguir los pasos de instalación enumerados más adelante.

Si deseas utilizar ``Jackalope`` + *Apache* ``JackRabbit`` como el medio de almacenamiento (recomendable), 
también necesitas el *Java* (*JRE*). Para otros mecanismos y sus requisitos, por favor refiérete a sus respectivas secciones.

Instalando
----------

*Apache* ``Jackrabbit``
~~~~~~~~~~~~~~~~~~~~~~~

El recinto de seguridad del ``CMF`` de *Symfony* de manera predeterminada usa ``Jackalope`` con *Apache* ``JackRabbit``.
Puedes configurar métodos de almacenamiento alternativo, pero este es el más probado, y debería ser el más fácil de configurar.

Puedes conseguir la más reciente versión de *Apache* ``Jackrabbit`` en la página de descarga oficial del `proyecto <http://jackrabbit.apache.org/downloads.html>`_.
Para lanzarlo, usa la siguiente orden:

.. code-block:: bash

    java -jar jackrabbit-standalone-*.jar

De manera predefinida el servidor escucha en el puerto 8080, puedes cambiar esto especificando el puerto en la línea de ordenes.

.. code-block:: bash

    java -jar jackrabbit-standalone-*.jar --port 8888

Para sistemas *unix*, puedes conseguir el guión de arranque/detención para el archivo :file:`/etc/init.d` `aquí <https://github.com/sixty-nine/Jackrabbit-startup-script>`_

Consiguiendo el código del recinto de seguridad
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

El código fuente del recinto de seguridad del ``CMF`` de *Symfony* está disponible en *github*. Para conseguirlo usa:

.. code-block:: bash

    git clone git://github.com/symfony-cmf/cmf-sandbox.git

Ve al directorio y copia los archivos de configuración predefinidos:

.. code-block:: bash

    cd cmf-sandbox
    cp app/config/parameters.yml.dist app/config/parameters.yml
    cp app/config/phpcr_jackrabbit.yml.dist app/config/phpcr.yml

Estos dos archivos incluyen los parámetros de configuración predefinidos para el mecanismo de almacenamiento del recinto de seguridad. Los puedes modificar para cubrir mejor tus necesidades.

.. note::

    El segundo archivo de configuración se refiere específicamente a la configuración de ``jackalope`` +  ``jackrabbit``. Hay otros archivos disponibles para diferentes pilas de configuración.
    
Luego, consigue ``composer`` e instala los paquetes necesarios (esto puede tomar un rato).

.. code-block:: bash

    curl -s http://getcomposer.org/installer | php --
    php composer.phar install

.. note::

    En Windows necesitas ejecutar el intérprete de ordenes como administrador o editar el archivo :file:`composer.json`y cambiar la línea ``"symfony-assets-install": "symlink"`` a ``"symfony-assets-install": ""``. Si fallas al hacerlo podrías recibir:
.. code-block:: bash

    [Symfony\Component\Filesystem\Exception\IOException]
    Imposible crear el enlace simbólico debido al error código 1314: 'El cliente no cuenta con un privilegio requerido'. ¿Tienes el privilegio de administrador requerido?

Preparando el repositorio *PHPCR*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now that you have all the code, you need to setup your PHPCR repository. 
PHPCR organizes data in workspaces, and sandbox uses the "default" workspace,
which is exists by default in Jackrabbit. Si utilizas otras aplicaciones que requieren ``Jackrabbit``, o si solo deseas cambiar el nombre del espacio de trabajo, lo puedes hacer en el archivo :file:`app/config/phpcr.yml`. La siguiente orden creará un nuevo espacio de trabajo llamado ``«sandbox»`` en ``Jackrabbit``. Si decides utilizar el espacio de trabajo ``«default»``, la puedes omitir.

.. code-block:: bash

    app/console doctrine:phpcr:workspace:create sandbox

Una vez configurado tu espacio de trabajo, debes `registrar los tipos de nodo <https://github.com/doctrine/phpcr-odm/wiki/Custom-node-type-phpcr%3Amanaged>`_ para el *phpcr-odm*:

.. code-block:: bash

    app/console doctrine:phpcr:register-system-node-types

Importando accesorios
~~~~~~~~~~~~~~~~~~~~~

La interfaz de administración sigue en una etapa temprana. Hasta que mejore, lo más fácil es crear los datos programáticamente. La mejor manera de hacerlo es con los accesorios de *Doctrine*. El ``DoctrinePHPCRBundle`` incluido en el repositorio ``symfony-cmf`` proporciona una orden para cargar accesorios.

.. code-block:: bash

    app/console -v doctrine:phpcr:fixtures:load

Ejecuta esta orden para cargar los accesorios desde el ``MainBundle`` del recinto de seguridad, la cual poblará tu repositorio con datos maniquí, es decir, carga las páginas ``demo``.

Accediendo a tu recinto de seguridad
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

El recinto de seguridad ahora debería ser accesible en tu servidor *web*.

.. code-block:: text

    http://localhost/app_dev.php

Para ejecutar el recinto de seguridad en modo de producción necesitas generar los delegados de *Doctrine* y volcar los activos de ``assetic``:

.. code-block:: text

    app/console cache:warmup --env=prod --no-debug
    app/console assetic:dump --env=prod --no-debug


Mecanismos de almacenamiento alternativo
----------------------------------------

El ``CMF`` de *Symfony* y el recinto de seguridad son de almacenamiento agnóstico, lo cual significa que puedes cambiar el mecanismo de almacenamiento sin tener que cambiar tu código. El mecanismo de almacenamiento predefinido para el recinto de seguridad es ``Jackalope`` + *Apache* ``Jackrabbit``, puesto que es la configuración más probada y estable. Sin embargo, hay otras alternativas disponibles.

``Jackalope`` + *DBAL* de *Doctrine*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. note:: 

    De manera predeterminada, cuándo utilizas el *DBAL* de *Doctrine*, los datos se almacenan utilizando una base de datos `Sqlite <http://www.sqlite.org/>`_.
    Revisa la página del proyecto para instrucciones de instalación.
    Si deseas utilizar otros sistemas de base de datos, cambia los parámetros de configuración en el archivo :file:`app/config/parameters.yml`. Consulta la página sobre la `configuración del DBAL de Doctrine en Symfony <http://gitnacho.github.com/symfony-docs-es/reference/configuration/doctrine.html#doctrine-dbal-configuration>`_ o la `documentación de Doctrine <http://docs.doctrine-project.org/projects/doctrine-dbal/en/latest/reference/configuration.html>`_ para más información.

Ve al directorio del recinto de seguridad y copia el archivo de configuración predefinido para
configurar el *DBAL* de *Doctrine*: 

.. code-block:: bash

    cd cmf-sandbox
    cp app/config/phpcr_doctrine_dbal.yml.dist app/config/phpcr.yml

Luego, debes instalar el paquete *DBAL* de *Doctrine* real requerido por ``jackalope``:

.. code-block:: bash

    php composer.phar require jackalope/jackalope-doctrine-dbal:dev-master

Y crea e inicia tu base de datos:

.. code-block:: bash

    app/console doctrine:database:create
    app/console doctrine:phpcr:init:dbal

Después de esto, deberías seguir los pasos en `Preparando el repositorio PHPCR`_.

Memorizando en caché con *Doctrine*
+++++++++++++++++++++++++++++++++++

Opcionalmente, para mejorar el rendimiento y habilitar los metadatos, puedes instalar ``LiipDoctrineCacheBundle``
escribiendo la siguiente orden:

.. code-block:: bash

    php composer.phar require liip/doctrine-cache-bundle:dev-master

Y añade la siguiente entrada a tu archivo :file:`app/AppKernel.php`:

.. code-block:: php

    // app/AppKernel.php
    public function registerBundles()
    {
      $bundles = array(
          // ...
          new Liip\DoctrineCacheBundle\LiipDoctrineCacheBundle(),
          // ...
      );
    }
    
Finalmente descomenta las opciones de caché en el archivo :file:`phpcr.yml` así como las de ``liip_doctrine_cache`` en el archivo :file:`config.yml`.

.. code-block:: yaml

    # app/config/phpcr.yml
    caches:
        meta: liip_doctrine_cache.ns.meta
        nodes: liip_doctrine_cache.ns.nodes

.. code-block:: yaml

    # app/config/config.yml

    # memorización con jackalope en doctrine
    liip_doctrine_cache:
        namespaces:
            meta:
                type: file_system
            nodes:
                type: file_system

Proveyendo *PHPCR* para *Midgard2*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Si quieres correr el recinto de seguridad del ``CMF`` con el proveedor `PHPCR de Midgard2 <http://midgard-project.org/phpcr/>`_ en vez de ``Jackrabbit``, necesitas instalar la extensión ``midgard2`` de *PHP*.
En sistemas *Debian/Ubuntu* actuales, esto se hace simplemente con:

.. code-block:: bash

    sudo apt-get install php5-midgard2

En *OS X* lo puedes instalar utilizando cualquier `Homebrew <http://mxcl.github.com/homebrew/>`_ con:

.. code-block:: bash

    brew install midgard2-php

o `MacPorts <http://www.macports.org/>`_  con

.. code-block:: bash

    sudo port install php5-midgard2

También necesitas descargar los archivos de esquema `midgard_tree_node.xml <https://raw.github.com/midgardproject/phpcr-midgard2/master/data/share/schema/midgard_tree_node.xml>`_ y `midgard_namespace_registry.xml <https://github.com/midgardproject/phpcr-midgard2/raw/master/data/share/schema/midgard_namespace_registry.xml>`_, y colocarlos en «<tu-directorio-midgard2>/schema» (por omisión en ``«/usr/share/midgard2/schema»``).

To have the Midgard2 PHPCR implementation installed run the following additional command:

.. code-block:: bash

    php composer.phar require midgard/phpcr:dev-master

Finalmente, cambia uno de los archivos de configuración de ``Midgard2``:

.. code-block:: bash

    cp app/config/phpcr_midgard_mysql.yml.dist app/config/phpcr.yml

o

.. code-block:: bash

    cp app/config/phpcr_midgard_sqlite.yml.dist app/config/phpcr.yml

Después de esto, deberías seguir los pasos en `Preparando el repositorio PHPCR`_ para continuar el proceso de instalación.