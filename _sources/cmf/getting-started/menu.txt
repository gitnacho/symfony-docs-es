Menú
====

Concepto
--------

Ningún sistema *CMS* está completo sin un sistema de menús que permita a los usuarios navegar entre las páginas de contenido y realizar determinadas acciones. Si bien, normalmente asignan el contenido real en una estructura de árbol, los menús a menudo tienen su propia lógica, incluyendo opciones no asignadas al contenido o existentes en múltiples contextos con múltiples opciones, por ello volviéndolos un problema complejo.


El sistema de menús del ``CMS`` de *Symfony*
--------------------------------------------

La *EE* del ``CMF`` de *Symfony* incluye el ``MenuBundle``, una herramienta que te permite definir tus menús dinámicamente. It extends `KnpMenuBundle <https://github.com/knplabs/KnpMenuBundle>`_,
with a set of hierarchical, multi language menu elements, along with the tools
to load and store them from/to a database. También incluye las definiciones de la interfaz de administración y servicios relacionados necesarios para integrarlo con el `SonataDoctrinePHPCRAdminBundle <https://github.com/sonata-project/SonataDoctrinePhpcrAdminBundle>`_.

.. note::

    El ``MenuBundle`` extiende y en gran medida depende del `KnpMenuBundle <https://github.com/knplabs/KnpMenuBundle>`_, por lo tanto tienes que leer cuidadosamente la `documentación del KnpMenuBundle <https://github.com/KnpLabs/KnpMenuBundle/blob/master/Resources/doc/index.md>`_.
    Para el resto de esta página se supone que has leido dicha documentación, y estás familiarizado con conceptos como proveedores de menús y factorías de menús.


Usando
~~~~~~

De manera predeterminada el ``MenuBundle`` usa los reproductores y ayudantes del ``KnpMenuBundle`` para imprimir tus menús. Puedes consultar la `página de documentación respectiva <https://github.com/KnpLabs/KnpMenuBundle/blob/master/Resources/doc/index.md#rendering-menus>`_ para más información sobre el tema, pero una llamada básica sería:

.. code-block:: jinja

    {{ knp_menu_render('simple') }}

El nombre del menú proporcionado será pasado a la implementación de la ``MenuProviderInterface``, la cual lo utilizará para identificar qué menú quieres dibujar en esa sección específica.


El proveedor
~~~~~~~~~~~~

El núcleo del ``MenuBundle`` es ``PHPCRMenuProvider``, una implementación de la ``MenuProviderInterface`` que es responsable de cargar menús dinámicamente desde una base de datos *PHPCR*. It does so based on the menu root's ``path`` value, by combining
a preconfigured ``basepath`` value with a ``name`` given by the developer
when instantiating the menu rendering call. Esto permite al ``PHPCRMenuProvider`` manejar varias jerarquías del menú utilizando un sólo mecanismo de almacenamiento.

El elemento del menú recuperado usando este proceso se utiliza como el nodo raíz del menú, y sus hijos serán cargados progresivamente conforme el ``MenuFactory`` vaya dibujando la estructura del menú completo.


La factoría
~~~~~~~~~~~

The ``ContentAwareFactory`` is a ``FactoryInterface`` implementation, which
generates the full ``MenuNode`` hierarchy from the provided data. Los datos generados de este modo se utilizan más tarde para generar la representación *HTML* real del menú. 

The included implementation focuses on generating ``MenuNode`` instances
from ``NodeInterface`` instances, as it is the best approach to handle tree-like
structures like the ones typically used by CMS. Otros planteamientos están implementados en la extensión de clases, y sus respectivas páginas de documentación se pueden encontrar en la página del `KnpMenuBundle`_.

``ContentAwareFactory`` is responsible for getting the full menu hierarchy
and rendering the respective ``MenuNode`` instances from the root node it
receives from the ``MenuProviderInterface`` implementation. También es responsable de determinar cuál elemento del menú (si lo hay) está viendo el usuario actualmente. ``KnpMenu`` ya incluye una factoría específica apuntada en el componente de enrutado de *Symfony2*, la cual extiende este paquete, para añadir el soporte necesario para:

- Almacenar instancias de ``Ruta`` en la base de datos (consulta la sección de :ref:`paquetes y proveedores de enrutado <routing-getting-route-object>` para más detalles sobre esto)
- Instancias de ``Ruta`` con contenido asociado (más sobre esto en la respectiva sección del  :ref:`RoutingBundle <routing-linking-a-route-with-a-model-instance>`)

Como se mencionó antes, la ``ContentAwareFactory`` es responsable de cargar todos los nodos del menú a partir del elemento raíz proporcionado. Los nodos cargados realmente pueden ser de cualquier clase, incluso si son diferentes de la clase del nodo raíz, pero todos tienen que implementar la ``NodeInterface`` para poder incluirlos en el menú generado.


Los nodos del menú
~~~~~~~~~~~~~~~~~~

Además, incluidos en el ``MenuBundle`` vienen dos tipos de nodos de contenido del menú: ``MenuNode`` y ``MultilangMenuNode``. Si leíste la página de documentación relativa al :doc:`content`, encontrarás un tanto familiar esta implementación. El ``MenuNode``
Implementa la ``NodeInterface`` mencionada arriba, y mantiene la información relacionada a una sola entrada del menú: Una ``etiqueta`` y una ``uri``, una lista de ``hijos``, tal como esperarías, más algunos ``atributos`` para él y sus
hijos, mismos que te permiten personalizar el proceso de reproducción real.
También incluye un campo ``Route`` y dos referencias al ``Contenido``. Estas se usan para almacenar un objeto ``Route`` asociado, más un elemento (no dos, a pesar del hecho de que existen dos campos) de ``Contenido``. El ``MenuNode`` puede tener una referencia fuerte (garantizando la integridad) o débil (sin garantizar la integridad) al elemento de ``Contenido`` real al que apunta, tu trabajo es elegir la que sea más adecuada en tu escenario. Puedes encontrar más información y referencias en la página de la documentación del `PHPCR de Doctrine <http://docs.doctrine-project.org/projects/doctrine-phpcr-odm/en/latest/reference/association-mapping.html#references>`_.

``MultilangMenuNode`` extiende al ``MenuNode`` con apoyo multilingüe. Añade un campo ``locale`` para identificar qué traducción pertenece a cada menú, más una ``etiqueta`` y una ``uri`` en los campos marcados como ``translated=true``, lo cual significa que diferirán entre traducciones, a diferencia de los otros campos.

También especifica la estrategia utilizada para almacenar múltiples traducciones en la base de datos:

.. configuration-block::

    .. code-block:: php

       /**
       * @PHPCRODM\Document(translator="attribute")
       */

For information on the available translation strategies, refer to the Doctrine
page regarding `Multi language support in PHPCR-ODM <http://docs.doctrine-project.org/projects/doctrine-phpcr-odm/en/latest/reference/multilang.html>`_

.. note::

    The ``MenuNode`` and ``MultilangMenuNode`` content types exist to preserve
    backwards compatibility with previous versions of the bundle, but they
    simply extend their Node counterparts. Estas clases están depreciadas, y serán removidas en una versión posterior.

Soporte para la administración
------------------------------

``MenuBundle`` also includes the administration panels and respective services
needed for integration with `SonataDoctrinePHPCRAdminBundle <https://github.com/sonata-project/SonataDoctrinePhpcrAdminBundle>`_,
a back office generation tool that can be installed with Symfony CMF. Para más información sobre esta, por favor consulta la sección de documentación del `paquete <https://github.com/sonata-project/SonataDoctrinePhpcrAdminBundle/tree/master/Resources/doc>`_.

Las interfaces de administración incluidas serán cargadas automáticamente si instalas el ``SonataDoctrinePHPCRAdminBundle`` (consulta :doc:`../tutorials/creating-cms-using-cmf-and-sonata` para instrucciones sobre cómo hacerlo).

Configurando
------------

Este paquete se configura usando un conjunto de parámetros, pero todos ellos son opcionales. You can go to the :doc:`../bundles/menu` reference page for the
full configuration options list and additional information.

Notas adicionales
-----------------

Para más información sobre el ``MenuBundle`` del ``CMF`` de *Symfony*, por favor consulta:

- :doc:`../bundles/menu` for advanced details and configuration reference
- `KnpMenuBundle`_ page for information on the bundle on which ``MenuBundle`` relies 
- `KnpMenu <https://github.com/knplabs/KnpMenu>`_ page for information on the underlying library used by ``KnpMenuBundle``
