.. index::
   single: Formulario; Tipo de campo personalizado

Cómo crear un tipo de campo personalizado para formulario
=========================================================

*Symfony* viene con un montón de tipos de campos fundamentales para la construcción de formularios.
Sin embargo, hay situaciones en las que queremos crear un tipo de campo de formulario personalizado
para un propósito específico. Esta receta asume que necesitamos una definición de campo que contiene el género de una persona, basándose en el campo ``choice`` existente. Esta sección explica cómo definir el campo, cómo podemos personalizar su diseño y, por último, cómo lo podemos registrar para usarlo en nuestra aplicación.

Definiendo el tipo de campo
---------------------------

Con el fin de crear el tipo de campo personalizado, primero tenemos que crear la clase que representa al campo. En nuestra situación, la clase contendrá el tipo de campo que se llamará ``GenderType`` y el archivo se guardará en la ubicación predeterminada para campos de formulario, la cual es ``<NombrePaquete>\form\Type``. Asegúrese de que el campo se extiende de
:class:`Symfony\\Component\\Form\\AbstractType`:

.. code-block:: php

    # src/Acme/DemoBundle/Form/Type/GenderType.php
    namespace Acme\DemoBundle\Form\Type;

    use Symfony\Component\Form\AbstractType;
    use Symfony\Component\Form\FormBuilder;

    class GenderType extends AbstractType
    {
        public function getDefaultOptions()
        {
            return array(
                'choices' => array(
                    'm' => 'Male',
                    'f' => 'Female',
                )
            );
        }

        public function getParent(array $options)
        {
            return 'choice';
        }

        public function getName()
        {
            return 'gender';
        }
    }

.. tip::

    La ubicación de este archivo no es importante - el directorio ``Form\Type`` sólo es una convención.

En este caso, el valor de retorno de la función ``getParent`` indica que estamos extendiendo el tipo de campo ``choice``. Esto significa que, por omisión, heredamos toda la lógica y prestación de ese tipo de campo. Para ver algo de la lógica, echa un vistazo a la clase `ChoiceType`_. Hay tres métodos que son particularmente importantes:

* ``buildForm()`` - Cada tipo de campo tiene un método ``buildForm``, que es donde configuras y construyes cualquier campo(s). Ten en cuenta que este es el mismo método que utilizas para configurar *tus* formularios, y aquí funciona igual.

* ``buildView()`` - Este método se utiliza para establecer las variables extra que necesitarás al reproducir el campo en una plantilla. Por ejemplo, en `ChoiceType`_, está definida una variable ``multiple`` que se fija y utiliza en la plantilla para establecer (o no un conjunto), el atributo ``multiple`` en el campo ``select``. Ve `Creando una plantilla para el campo`_ para más detalles.

* ``getDefaultOptions()`` --- Este define las opciones para el tipo de tu formulario mismas que puedes utilizar en ``buildForm()`` y ``buildView()``. Hay un montón de opciones comunes a todos los campos (consulta `FieldType`_), pero aquí, puedes crear cualquier otro que necesites.

.. tip::

    Si vas a crear un campo que consiste de muchos campos, entonces, asegúrate de establecer tu tipo "padre" como ``form`` o algo que extienda a ``form``.
    Además, si es necesario modificar la "vista" de cualquiera de tus tipos descendientes de tu tipo padre, utiliza el método ``buildViewBottomUp()``.

El método ``getName()`` devuelve un identificador que debe ser único en tu aplicación. Este se utiliza en varios lugares, tales como cuando personalizas cómo será pintado tu tipo de formulario.

El objetivo de nuestro campo es extender el tipo ``choice`` para habilitar la selección de un género. Esto se consigue fijando las opciones a una lista de posibles géneros.

Creando una plantilla para el campo
-----------------------------------

Cada tipo de campo está representado por un fragmento de la plantilla, el cual se determina en parte por el valor de su método ``getName()``. Para más información, consulta :ref:`cookbook-form-customization-form-themes`.

En este caso, debido a que nuestro campo padre es ``choice``, no *necesitamos* hacer ningún trabajo que nuestro tipo de campo personalizado como tipo ``choice``, hace automáticamente. Pero para beneficio de este ejemplo, vamos a suponer que cuando nuestro campo es "extendido" (es decir, botones de radio o casillas de verificación, en lugar de un campo selección), queremos pintarlo siempre como un elemento ``ul``. En tu plantilla del tema de tu formulario (consulta el enlace de arriba para más detalles), crea un bloque ``gender_widget`` para manejar esto:

.. code-block:: html+jinja

    {# src/Acme/DemoBundle/Resources/views/Form/fields.html.twig #}

    {% block gender_widget %}
    {% spaceless %}
        {% if expanded %}
            <ul {{ block('widget_container_attributes') }}>
            {% for child in form %}
                <li>
                    {{ form_widget(child) }}
                    {{ form_label(child) }}
                </li>
            {% endfor %}
            </ul>
        {% else %}
            {# simplemente deja que el elemento gráfico 'choice' reproduzca la etiqueta select #}
            {{ block('choice_widget') }}
        {% endif %}
    {% endspaceless %}
    {% endblock %}

.. note::

    Asegúrate que utilizas el prefijo correcto para el elemento gráfico. En este ejemplo, el nombre debe set ``gender_widget``, de acuerdo con el valor devuelto por ``getName``.
    Además, el archivo de configuración principal debe apuntar a la plantilla del formulario personalizado de modo que este se utilice al reproducir todos los formularios.

    .. code-block:: yaml

        # app/config/config.yml

            twig:
            form:
                resources:
                    - 'AcmeDemoBundle:Form:fields.html.twig'

Usando el tipo de campo
-----------------------

Ahora puedes utilizar el tipo de campo personalizado de inmediato, simplemente creando una nueva instancia del tipo en uno de tus formularios::

    // src/Acme/DemoBundle/Form/Type/AuthorType.php
    namespace Acme\DemoBundle\Form\Type;

    use Symfony\Component\Form\AbstractType;
    use Symfony\Component\Form\FormBuilder;
    
    class AuthorType extends AbstractType
    {
        public function buildForm(FormBuilder $builder, array $options)
        {
            $builder->add('gender_code', new GenderType(), array(
                'empty_value' => 'Choose a gender',
            ));
        }
    }

Pero esto sólo funciona porque el ``GenderType()`` es muy sencillo. ¿Qué pasa si los códigos de género se almacena en la configuración o en una base de datos? La siguiente sección se explica cómo resuelven este problema los tipos de campo más complejos.

Creando tu tipo de campo como un servicio
-----------------------------------------

Hasta ahora, este artículo ha supuesto que tienes un tipo de campo personalizado muy simple.
Pero si necesitas acceder a la configuración de una conexión base de datos, o a algún otro servicio, entonces querrás registrar tu tipo personalizado como un servicio. por ejemplo, supongamos que estamos almacenando los parámetros de género en la configuración:


.. configuration-block::

    .. code-block:: yaml
    
        # app/config/config.yml
        parameters:
            genders:
                m: Male
                f: Female

    .. code-block:: xml

        <!-- app/config/config.xml -->
        <parameters>
            <parameter key="genders" type="collection">
                <parameter key="m">Male</parameter>
                <parameter key="f">Female</parameter>
            </parameter>
        </parameters>

Para utilizar el parámetro, vamos a definir nuestro tipo de campo personalizado como un servicio, inyectando el valor del parámetro ``genders`` como el primer argumento de la función ``__construct`` que vamos a crear:

.. configuration-block::

    .. code-block:: yaml

        # src/Acme/DemoBundle/Resources/config/services.yml
        services:
            form.type.gender:
                class: Acme\DemoBundle\Form\Type\GenderType
                arguments:
                    - "%genders%"
                tags:
                        - { name:     form.type, alias: gender }

    .. code-block:: xml

        <!-- src/Acme/DemoBundle/Resources/config/services.xml -->
        <service id="form.type.gender" class="Acme\DemoBundle\Form\Type\GenderType">
            <argument>%genders%</argument>
            <tag name="form.type" alias="gender" />
        </service>

.. tip::

    Asegúrate de que estás importando el archivo de servicios. Consulta :ref:`service-container-imports-directive` para más detalles.

Asegúrate de que la etiqueta del atributo ``alias`` corresponde con el valor devuelto por el método ``getName`` definido anteriormente. Vamos a ver la importancia de esto en un momento cuando utilicemos el tipo de campo personalizado. Pero en primer lugar, agrega un argumento ``GenderType`` al ``__construct``, el cual recibe la configuración del género::


    # src/Acme/DemoBundle/Form/Type/GenderType.php
    namespace Acme\DemoBundle\Form\Type;
    // ...

    class GenderType extends AbstractType
    {
        private $genderChoices;
        
        public function __construct(array $genderChoices)
        {
            $this->genderChoices = $genderChoices;
        }
    
        public function getDefaultOptions()
        {
            return array(
                'choices' => $this->genderChoices,
            );
        }
        
        // ...
    }

¡Genial! El ``GenderType`` ahora es impulsado por los parámetros de configuración y está registrado como un servicio. Y debido a que utilizamos el alias de ``form.type`` en su configuración, es mucho más fácil utilizar el campo::

    // src/Acme/DemoBundle/Form/Type/AuthorType.php
    namespace Acme\DemoBundle\Form\Type;
    // ...

    class AuthorType extends AbstractType
    {
        public function buildForm(FormBuilder $builder, array $options)
        {
            $builder->add('gender_code', 'gender', array(
                'empty_value' => 'Choose a gender',
            ));
        }
    }

Ten en cuenta que en lugar de crear una nueva instancia, podemos referirnos a esta por el alias utilizado en la configuración de nuestro servicio, ``gender``. ¡Que te diviertas!

.. _`ChoiceType`: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/Type/ChoiceType.php
.. _`FieldType`: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/Type/FieldType.php