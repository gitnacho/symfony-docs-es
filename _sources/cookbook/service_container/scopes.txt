.. index::
   single: Inyección de dependencia; Ámbitos

Cómo trabajar con ámbitos
=========================

Esta entrada trata sobre los ámbitos, un tema un tanto avanzado relacionado con el :doc:`/book/service_container`. Si alguna vez has tenido un error hablando de «ámbitos» en la creación de servicios o necesitas crear un servicio que depende del servicio ``Petición``, entonces este artículo es para ti.

Entendiendo los ámbitos
-----------------------

El ámbito de un servicio controla la duración de una instancia de un servicio utilizado por el contenedor. El componente ``Inyección de dependencias`` tiene dos ámbitos genéricos:

- **container** (la opción predeterminada): Usa la misma instancia cada vez que la solicites desde el contenedor.

- **prototype**: Crea una nueva instancia cada vez que solicitas el servicio.

El ``FrameworkBundle`` también define un tercer ámbito: ``request``. Este ámbito está ligado a la petición, lo cual significa que se crea una nueva instancia para cada subpetición y no está disponible fuera de la petición (por ejemplo, en la *CLI*).

Los ámbitos agregan una restricción en las dependencias de un servicio: un servicio no puede depender de los servicios de un ámbito más estrecho. Por ejemplo, si creas un servicio genérico ``mi_foo``, pero tratas de inyectar el componente ``Petición``, recibirás una :class:`Symfony\\Component\\DependencyInjection\\Exception\\ScopeWideningInjectionException` al compilar el contenedor. Lee la barra lateral más adelante para más detalles.

.. sidebar:: Ámbitos y dependencias

    Imaginemos que has configurado un servicio ``my_mailer``. No has configurado el ámbito del servicio, por lo cual el predeterminado es el ``contenedor``. En otras palabras, cada vez preguntas al contenedor por el servicio ``my_mailer``, obtienes el mismo objeto. Esta, por lo general, es la forma en que deseas que trabajen tus servicios.

    Imagina, no obstante, que necesitas el servicio ``Petición`` en tu servicio ``my_mailer``, tal vez porque estás leyendo la *URL* de la ``Petición`` actual.
    Por lo tanto, lo agregas como argumento del constructor. Ve por qué esto presenta un problema:

    * Al solicitar ``my_mailer``, se crea una instancia de ``my_mailer`` (llamémosla ``MailerA``) y se pasa al servicio ``Petición`` (vamos a llamarlo ``RequestA``). ¡La vida es buena!

    * Has hecho una subpetición en *Symfony*, esta es una forma elegante de decir que has llamado, por ejemplo, a la función ``{% render ... %}`` de *Twig*, que ejecuta otro controlador. Internamente, el antiguo servicio ``Petición`` (``RequestA``) en realidad es reemplazado por una instancia de la nueva petición (``RequestB``).
      Esto sucede en segundo plano, y es totalmente normal.

    * En tu controlador incorporado, una vez más invocas al servicio ``my_mailer``. Debido a que tu servicio está en el ámbito del ``contenedor``, se vuelve a utilizar la misma instancia (``MailerA``). Pero aquí está el problema: la instancia de ``MailerA`` contiene todavía el viejo objeto ``RequestA``, que ahora **no** es el objeto petición correcto (``RequestB`` ahora es el servicio ``Petición`` actual). Esto es sutil, pero el desajuste puede causar grandes problemas, lo cual no está permitido.

      Por lo tanto, esa es la razón por la *cual* existen los ámbitos, y la forma en que pueden causar problemas. Sigue leyendo para encontrar las soluciones comunes.

.. note::

    Un servicio puede, por supuesto, depender de un servicio desde un ámbito más amplio sin ningún problema.

Estableciendo el ámbito en la definición
----------------------------------------

El ámbito de un servicio se establece en la definición del servicio:

.. configuration-block::

    .. code-block:: yaml

        # src/Acme/HelloBundle/Resources/config/services.yml
        services:
            greeting_card_manager:
                class: Acme\HelloBundle\Mail\GreetingCardManager
                scope: request

    .. code-block:: xml

        <!-- src/Acme/HelloBundle/Resources/config/services.xml -->
            <services>
            <service id="greeting_card_manager" class="Acme\HelloBundle\Mail\GreetingCardManager" scope="request" />
            </services>

    .. code-block:: php

        // src/Acme/HelloBundle/Resources/config/services.php
        use Symfony\Component\DependencyInjection\Definition;

        $container->setDefinition(
            'greeting_card_manager',
            new Definition('Acme\HelloBundle\Mail\GreetingCardManager')
        )->setScope('request');

Si no especificas el ámbito, el valor predeterminado es ``contenedor``, el cual es el que quieres la mayor parte del tiempo. A menos que tu servicio dependa de otro servicio que aplica su ámbito más restringido (por lo general, el servicio ``Petición``), es probable que no sea necesario definir el ámbito.

Usando un servicio de menor ámbito
----------------------------------

Si tu servicio depende del ámbito de un servicio, la mejor solución es ponerlo en el mismo ámbito (o uno más estrecho). Normalmente, esto significa poner tu nuevo servicio en el ámbito de la ``Petición``.

Pero esto no siempre es posible (por ejemplo, una extensión de *Twig* debe estar en el ámbito del ``contenedor`` como el entorno *Twig* que necesita como dependencia).
En estos casos, debes pasar todo el contenedor en tu servicio y recuperar tu dependencia desde el contenedor cada vez que lo necesites para asegurarte de que tienes la instancia correcta::

    // src/Acme/HelloBundle/Mail/Mailer.php
    namespace Acme\HelloBundle\Mail;

    use Symfony\Component\DependencyInjection\ContainerInterface;

    class Mailer
    {
        protected $container;

        public function __construct(ContainerInterface $container)
        {
            $this->container = $container;
        }

        public function sendEmail()
        {
            $request = $this->container->get('request');
            // ... haz algo con la respuesta de redirección
        }
    }

.. caution::

    Ten cuidado de no guardar la petición en una propiedad del objeto para una futura llamada del servicio, ya que sería el mismo problema descrito en la primera sección (excepto que *Symfony* no puede detectar qué estás haciendo mal).

La configuración del servicio de esta clase sería algo como esto:

.. configuration-block::

    .. code-block:: yaml

        # src/Acme/HelloBundle/Resources/config/services.yml
        parameters:
            # ...
            my_mailer.class: Acme\HelloBundle\Mail\Mailer
        services:
            my_mailer:
                class:     "%my_mailer.class%"
                arguments:
                    - "@service_container"
                # scope: el contenedor se puede omitir como si fuera el predefinido

    .. code-block:: xml

        <!-- src/Acme/HelloBundle/Resources/config/services.xml -->
        <parameters>
            <!-- ... -->
            <parameter key="my_mailer.class">Acme\HelloBundle\Mail\Mailer</parameter>
        </parameters>

            <services>
            <service id="my_mailer" class="%my_mailer.class%">
                 <argument type="service" id="service_container" />
            </service>
            </services>

    .. code-block:: php

        // src/Acme/HelloBundle/Resources/config/services.php
        use Symfony\Component\DependencyInjection\Definition;
        use Symfony\Component\DependencyInjection\Reference;

        // ...
        $container->setParameter('my_mailer.class', 'Acme\HelloBundle\Mail\Mailer');

        $container->setDefinition('my_mailer', new Definition(
            '%my_mailer.class%',
            array(new Reference('service_container'))
        ));

.. note::

    Inyectar el contenedor completo en un servicio generalmente no es una buena idea (inyecta sólo lo que necesitas). En algunos raros casos, es necesario cuando tienes un servicio en el entorno del ``Contenedor`` que necesita un servicio del ámbito de la ``Petición``.

Si defines un controlador como servicio entonces puedes obtener el objeto ``Petición`` sin inyectar el contenedor pasándolo como argumento de tu método acción. Ve los detalles en :ref:`book-controller-request-argument`.
