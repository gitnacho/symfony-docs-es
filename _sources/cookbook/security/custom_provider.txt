.. index::
   single: Seguridad; Proveedor de usuario

Cómo crear un proveedor de usuario personalizado
================================================

Parte del proceso de autenticación estándar de *Symfony* depende del "proveedor de usuarios".
Cuando un usuario envía un nombre de usuario y una contraseña, la capa de autenticación solicita al proveedor de usuarios configurado devuelva un objeto usuario para un nombre de usuario dado.
*Symfony* comprueba si la contraseña de este usuario es correcta y genera un indicador de seguridad para que el usuario quede autenticado durante la sesión actual.
Fuera de la caja, *Symfony* tiene un proveedor de usuario "en memoria" y una "entidad".
En este artículo vamos a ver cómo puedes crear un proveedor de usuarios propio, que podrías utilizar si los usuarios se acceden a través de una base de datos personalizada, un archivo, o --- como se muestra en este ejemplo --- un servicio web.

Creando una clase usuario
-------------------------

En primer lugar, independientemente de *donde* vienen los datos de tu usuario, tendrás que crear una clase ``User`` que represente esos datos. El ``usuario`` se puede ver como te apetezca y contener los datos que quieras. El único requisito es que implemente la clase :class:`Symfony\\Component\\Security\\Core\\User\\UserInterface`.
Los métodos de esta interfaz por lo tanto, se deben definir en la clase usuario personalizada: ``getRoles()``, ``getPassword()``, ``getSalt()``, ``getUsername()``, ``eraseCredentials()``, ``equals()``.

Vamos a ver esto en acción:

.. code-block:: php

    // src/Acme/WebserviceUserBundle/Security/User.php
    namespace Acme\WebserviceUserBundle\Security\User;

    use Symfony\Component\Security\Core\User\UserInterface;

    class WebserviceUser implements UserInterface
    {
        private $username;
        private $password;
        private $salt;
        private $roles;

        public function __construct($username, $password, $salt, array $roles)
        {
            $this->username = $username;
            $this->password = $password;
            $this->salt = $salt;
            $this->roles = $roles;
        }

        public function getRoles()
        {
            return $this->roles;
        }

        public function getPassword()
        {
            return $this->password;
        }

        public function getSalt()
        {
            return $this->salt;
        }

        public function getUsername()
        {
            return $this->username;
        }   

        public function eraseCredentials()
        {
        }

        public function equals(UserInterface $user)
        {
            if (!$user instanceof WebserviceUser) {
                    return false;
            }

            if ($this->password !== $user->getPassword()) {
                    return false;
            }

            if ($this->getSalt() !== $user->getSalt()) {
                    return false;
            }

            if ($this->username !== $user->getUsername()) {
                    return false;
            }

                return true;
        }
    }

Si tiene más información sobre tus usuarios --- como un "nombre" --- entonces puedes agregar un campo ``"first_name"`` para almacenar esos datos.

Para más detalles sobre cada uno de los métodos, consulta la :class:`Symfony\\Component\\Security\\Core\\User\\UserInterface`.

Creando un proveedor de usuario
-------------------------------

Ahora que tenemos una clase de ``usuario``, vamos a crear un proveedor de usuario, que tome información del usuario de algún servicio web, cree un objeto ``WebserviceUser``, y lo rellene con datos.

El proveedor de usuario sólo es una simple clase *PHP* que debe aplicar la :class:`Symfony\\Component\\Security\\Core\\User\\UserProviderInterface`, la cual requiere que se definan tres métodos: ``loadUserByUsername($username)``, ``refreshUser(UserInterface $user)`` y ``supportsClass($class)``. para más detalles, consulta la :class:`Symfony\\Component\\Security\\Core\\User\\UserProviderInterface`.


He aquí un ejemplo de cómo se podría hacer esto::

    // src/Acme/WebserviceUserBundle/Security/User/WebserviceUserProvider.php
    namespace Acme\WebserviceUserBundle\Security\User;

    use Symfony\Component\Security\Core\User\UserProviderInterface;
    use Symfony\Component\Security\Core\User\UserInterface;
    use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
    use Symfony\Component\Security\Core\Exception\UnsupportedUserException;

    class WebserviceUserProvider implements UserProviderInterface
    {
        public function loadUserByUsername($username)
        {
            // aquí haz una llamada a tu servicio web
            // $userData = ...
            // pretende que devuelve una matriz cuando tiene éxito, false si no hay usuario

            if ($userData) {
                // $password = '...';
                // ...

                return new WebserviceUser($username, $password, $salt, $roles)
            } else {
                throw new UsernameNotFoundException(sprintf('Username "%s" does not exist.', $username));
            }
        }

        public function refreshUser(UserInterface $user)
        {
            if (!$user instanceof WebserviceUser) {
                throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', get_class($user)));
            }

            return $this->loadUserByUsername($user->getUsername());
        }

        public function supportsClass($class)
        {
            return $class === 'Acme\WebserviceUserBundle\Security\User\WebserviceUser';
        }
    }

Creando un servicio para el proveedor de usuario
------------------------------------------------

Ahora hacemos que el proveedor usuario esté disponible como el servicio.

.. configuration-block::

    .. code-block:: yaml

        # src/Acme/MailerBundle/Resources/config/services.yml
        parameters:
            webservice_user_provider.class: Acme\WebserviceUserBundle\Security\User\WebserviceUserProvider
            
        services:
            webservice_user_provider:
                class: %webservice_user_provider.class%
    
    .. code-block:: xml

        <!-- src/Acme/WebserviceUserBundle/Resources/config/services.xml -->
        <parameters>
            <parameter key="webservice_user_provider.class">Acme\WebserviceUserBundle\Security\User\WebserviceUserProvider</parameter>
        </parameters>
 
            <services>
            <service id="webservice_user_provider" class="%webservice_user_provider.class%"></service>
            </services>
        
    .. code-block:: php
    
        // src/Acme/WebserviceUserBundle/Resources/config/services.php
        use Symfony\Component\DependencyInjection\Definition;
        
        $container->setParameter('webservice_user_provider.class', 'Acme\WebserviceUserBundle\Security\User\WebserviceUserProvider');
        
        $container->setDefinition('webservice_user_provider', new Definition('%webservice_user_provider.class%');

.. tip::

    La implementación real del proveedor de usuario probablemente tendrá algunas dependencias u opciones de configuración u otros servicios. Agrégalas como argumentos en la definición del servicio.

.. note::

    Asegúrate de que estás importando el archivo de servicios. Consulta :ref:`service-container-imports-directive` para más detalles.

Modificando :file:`security.yml`
--------------------------------

En ``/app/config/security.yml`` se junta todo. Añade el proveedor de usuario a la lista de proveedores en la sección de "seguridad". Elige un nombre para el proveedor de usuario (por ejemplo, ``"webservice"``) y menciona el identificador del servicio que acabas de definir.


.. code-block:: yaml

    security:
        providers:
            webservice:
                id: webservice_user_provider

*Symfony* también necesita saber cómo codificar las contraseñas suministradas por los usuarios del sitio web, por ejemplo, mediante la cumplimentación de un formulario de acceso. Lo puedes hacer añadiendo una línea a la opción ``"encoders"`` en ``/app/config/security.yml``. 

.. code-block:: yaml

    security:
        encoders:
            Acme\WebserviceUserBundle\Security\User\WebserviceUser: sha512

El valor aquí debe corresponder con cualquiera de las contraseñas que fueron codificadas originalmente al crear a los usuarios (cuando se crearon los usuarios). cuando un usuario envía su contraseña, se añade el valor de sal a la contraseña y entonces se codifica utilizando el algoritmo antes de comparar la contraseña con algoritmo ``hash`` devuelto por el método ``getPassword()``. Además, dependiendo de tus opciones, la contraseña se puede codificar varias veces y codificar a ``base64``.

.. sidebar:: Detalles sobre cómo se codifican las contraseñas

    *Symfony* utiliza un método específico para combinar la sal y codificar la contraseña antes de compararla con la contraseña codificada. Si ``getSalt()`` no devuelve nada, entonces la contraseña es presentada simplemente codificada utilizando el algoritmo que especificaste en :file:`security.yml`. Si se especificó una *sal*, entonces se crea el siguiente valor y *luego* codifica mediante el algoritmo:
    
        ``$password.'{'.$salt.'}';``

    Si tus usuarios externos tienen sus contraseñas saladas por medio de un método diferente, entonces tendrás que trabajar un poco más para que *Symfony* codifique correctamente la contraseña. Eso está fuera del alcance de este artículo, pero incluimos la subclase ``MessageDigestPasswordEncoder`` y reemplazamos el método ``mergePasswordAndSalt``.
    
    Además, la codificación predeterminada, está codificada en múltiples ocasiones y finalmente codificada a ``base64``. Para detalles más específicos, consulta `MessageDigestPasswordEncoder`_.
    Para evitarlo, esto se configura en :file:`security.yml`:
    
    .. code-block:: yaml
    
        security:
            encoders:
                Acme\WebserviceUserBundle\Security\User\WebserviceUser:
                    algorithm: sha512
                    encode_as_base64: false
                    iterations: 1

.. _MessageDigestPasswordEncoder: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Encoder/MessageDigestPasswordEncoder.php