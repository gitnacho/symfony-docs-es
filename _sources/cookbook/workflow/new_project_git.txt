Cómo crear y guardar un proyecto *Symfony2* en *git*
====================================================

.. tip::

    A pesar de que este artículo específicamente es acerca de *git*, los mismos principios genéricos se aplican si estás guardando el proyecto en *Subversión*.

Una vez hayas leído :doc:`/book/page_creation` y te sientas cómodo usando *Symfony*, sin duda estarás listo para comenzar tu propio proyecto. En este artículo, aprenderás la mejor manera de empezar un nuevo proyecto *Symfony2* y almacenarlo usando el sistema de control de versiones `git`_.

Configuración inicial del proyecto
----------------------------------

Para empezar, tendrás que descargar *Symfony* e iniciar tu repositorio *git* local:

1. Descarga la `edición estándar de Symfony2`_ ``sin vendors``.

2. Descomprime la distribución. Esto creará un directorio llamado *Symfony* con tu nueva estructura del proyecto, archivos de configuración, etc. Cambia el nombre *Symfony* a lo que quieras.

3. Crea un nuevo archivo llamado :file:`.gitignore` en la raíz de tu nuevo proyecto (por ejemplo, al lado del archivo :file:`deps`) y pega lo siguiente en él. Los archivos que coincidan con estos patrones serán ignorados por *git*:

   .. code-block:: text

        /web/bundles/
        /app/bootstrap*
        /app/cache/*
        /app/logs/*
        /vendor/
        /app/config/parameters.ini

.. tip::

   Posiblemente también quieras crear un :file:`.gitignore` que puedas utilizar en todo el sistema, en cuyo caso, puedes encontrar más información aquí: `Github .gitignore`_
   De esta manera puedes excluir archivos y directorios usados frecuentemente por tu *IDE* en todos tus proyectos.

4. Copia ``app/config/parameters.ini`` a ``app/config/parameters.ini.dist``.
   El archivo :file:`parameters.ini` es ignorado por *git* (ve más arriba) para no comprometer la configuración específica de la máquina ---como la contraseña de la base de datos---. Al crear el archivo :file:`parameters.ini.dist`, los nuevos desarrolladores rápidamente pueden clonar el proyecto, copiar este archivo a :file:`parameters.ini`, personalizarlo y empezar a desarrollar.

5. Inicia el repositorio *git*:

   .. code-block:: bash

        $ git init

6. Agrega todos los archivos iniciales a *git*:

   .. code-block:: bash

        $ git add .

7. Crea una confirmación de cambios inicial en tu proyecto recién iniciado:

   .. code-block:: bash

        $ git commit -m "Initial commit"

8. Finalmente, descarga todas las bibliotecas de terceros:

   .. code-block:: bash

        $ php bin/vendors install

En este punto, tienes un proyecto *Symfony2* totalmente funcional confirmado correctamente en *git*. Puedes comenzar a desarrollarlo inmediatamente, confirmando los nuevos cambios al repositorio *git*.

.. tip::

    Después de ejecutar la orden:

    .. code-block:: bash

        $ php bin/vendors install

    tu proyecto contendrá completa la historia de *git* de todos los paquetes y bibliotecas definidos en el archivo ``deps``. Este puede tener tanto como 100 MB!
    Puedes eliminar los directorios de una historia de *Git* con la siguiente orden:

    .. code-block:: bash

        $ find vendor -name .git -type d | xargs rm -rf

    La orden elimina todos los directorios ``.git`` que se encuentran en el directorio ``vendor``.

    Si deseas actualizar los paquetes definidos en el archivo ``deps`` después de esto, tendrás que volver a instalarlos:

    .. code-block:: bash

        $ php bin/vendors install --reinstall

Puedes continuar, siguiendo el capítulo :doc:`/book/page_creation` para aprender más acerca de cómo configurar y desarrollar tu aplicación.

.. tip::

    La *edición estándar de Symfony2* viene con alguna funcionalidad de ejemplo. Para eliminar el código de ejemplo, sigue las instrucciones del archivo `Readme de la edición estándar`_.

.. _cookbook-managing-vendor-libraries:

.. include:: _vendor_deps.rst.inc

``Vendors`` y submódulos
~~~~~~~~~~~~~~~~~~~~~~~~

En lugar de utilizar el sistema ``deps``, ``bin/vendors`` para gestionar tus bibliotecas de proveedores, puedes optar en su lugar por utilizar los `submódulos git`_ nativos. No hay nada malo con este enfoque, aunque el sistema ``deps`` es la forma oficial de solucionar este problema y los submódulos de *git* pueden ser difíciles de trabajar con el tiempo.

Almacenando tu proyecto en un servidor remoto
---------------------------------------------

Ahora tienes un proyecto *Symfony2* totalmente funcional almacenado en *git*. Sin embargo, en la mayoría de los casos, también desearás guardar tu proyecto en un servidor remoto, tanto con fines de seguridad, como para que otros desarrolladores puedan colaborar en el proyecto.

La manera más fácil de almacenar tu proyecto en un servidor remoto es a través de `GitHub`_.
Los repositorios públicos son gratuitos, sin embargo tendrás que pagar una cuota mensual para tener repositorios privados.

Alternativamente, puedes almacenar tu repositorio *git* en cualquier servidor creando un `repositorio minimalista`_ y luego enviando tus cambios al mismo. Una biblioteca que te ayuda a gestionar esto es `Gitolite`_.

.. _`git`: http://git-scm.com/
.. _`edición estándar de Symfony2`: http://symfony.com/download
.. _`Readme de la edición estándar`: https://github.com/symfony/symfony-standard/blob/master/README.md
.. _`submódulos git`: http://book.git-scm.com/5_submodules.html
.. _`GitHub`: https://github.com/
.. _`repositorio minimalista`: http://progit.org/book/es/ch4-4.html
.. _`Gitolite`: https://github.com/sitaramc/gitolite
.. _`Github .gitignore`: http://help.github.com/ignore-files/
