.. index::
   single: Flujo de trabajo; Git

Cómo crear y guardar un proyecto *Symfony2* en *git*
====================================================

.. tip::

    <r0> A pesar de que este artículo específicamente es acerca de *git*, los mismos principios genéricos se aplican si estás guardando el proyecto en *Subversión*.

Una vez hayas leído :doc:`/book/page_creation` y te sientas cómodo usando *Symfony*, sin duda estarás listo para comenzar tu propio proyecto. En este artículo, aprenderás la mejor manera de empezar un nuevo proyecto *Symfony2* y almacenarlo usando el sistema de control de versiones `git`_.

Configuración inicial del proyecto
----------------------------------

Para empezar, tendrás que descargar *Symfony* e iniciar tu repositorio *git* local:

1. Descarga la `edición estándar de Symfony2`_ ``sin vendors``.

2. Descomprime la distribución. Esto creará un directorio llamado *Symfony* con tu nueva estructura del proyecto, archivos de configuración, etc. Cambia el nombre *Symfony* a lo que quieras.

3. Crea un nuevo archivo llamado :file:`.gitignore` en la raíz de tu nuevo proyecto (por ejemplo, junto al archivo :file:`composer.json`) y pega lo siguiente ahí. Los archivos que coincidan con estos patrones serán ignorados por *git*:

   .. code-block:: text

        /web/bundles/
        /app/bootstrap*
        /app/cache/*
        /app/logs/*
        /vendor/  
        /app/config/parameters.yml

.. tip::

   Posiblemente también quieras crear un :file:`.gitignore` que puedas utilizar en todo el sistema, en cuyo caso, puedes encontrar más información aquí: `Github .gitignore`_
   De esta manera puedes excluir archivos y directorios usados frecuentemente por tu *IDE* en todos tus proyectos.

4. Copia ``app/config/parameters.yml`` a ``app/config/parameters.yml.dist``.
   El archivo :file:`parameters.yml` es ignorado por *git* (ve más arriba) para no comprometer la configuración específica de la máquina ---como la contraseña de la base de datos---. Al crear el archivo :file:`parameters.yml.dist`, los nuevos desarrolladores rápidamente pueden clonar el proyecto, copiar este archivo a :file:`parameters.yml`, personalizarlo y empezar a desarrollar.

5. Inicia el repositorio *git*:

   .. code-block:: bash

        $ git init

6. Agrega todos los archivos iniciales a *git*:

   .. code-block:: bash

        $ git add .

7. Crea una confirmación de cambios inicial en tu proyecto recién iniciado:

   .. code-block:: bash

        $ git commit -m "Initial commit"

8. Por último, descarga todas las bibliotecas de otros proveedores ejecutando el ``composer``. Para obtener más información, consulta :ref:`installation-updating-vendors`.

En este punto, tienes un proyecto *Symfony2* totalmente funcional confirmado correctamente en *git*. Puedes comenzar a desarrollarlo inmediatamente, confirmando los nuevos cambios al repositorio *git*.

Puedes continuar, siguiendo el capítulo :doc:`/book/page_creation` para aprender más acerca de cómo configurar y desarrollar tu aplicación.

.. tip::

    La *edición estándar de Symfony2* viene con alguna funcionalidad de ejemplo. Para eliminar el código de ejemplo, sigue las instrucciones del archivo `Readme de la edición estándar`_.

.. _cookbook-managing-vendor-libraries:

.. include:: _vendor_deps.rst.inc

``Vendors`` y submódulos
~~~~~~~~~~~~~~~~~~~~~~~~

En lugar de utilizar el sistema ``composer.json`` para gestionar tus bibliotecas de proveedores, puedes optar por utilizar `submódulos git`_ nativos. No hay nada malo con este enfoque, aunque el sistema ``composer.json`` es la forma oficial de solucionar este problema y, probablemente, sea mucho más fácil. A diferencia de los *submódulos git*, ``Composer`` es lo suficientemente inteligente como para calcular qué bibliotecas dependen de cuáles otras bibliotecas.

Almacenando tu proyecto en un servidor remoto
---------------------------------------------

Ahora tienes un proyecto *Symfony2* totalmente funcional almacenado en *git*. Sin embargo, en la mayoría de los casos, también desearás guardar tu proyecto en un servidor remoto, tanto con fines de seguridad, como para que otros desarrolladores puedan colaborar en el proyecto.

La manera más fácil de almacenar tu proyecto en un servidor remoto es a través de `GitHub`_.
Los repositorios públicos son gratuitos, sin embargo tendrás que pagar una cuota mensual para tener repositorios privados.

Alternativamente, puedes almacenar tu repositorio *git* en cualquier servidor creando un `repositorio minimalista`_ y luego enviando tus cambios al mismo. Una biblioteca que te ayuda a gestionar esto es `Gitolite`_.

.. _`git`: http://git-scm.com/
.. _`edición estándar de Symfony2`: http://symfony.com/download
.. _`Readme de la edición estándar`: https://github.com/symfony/symfony-standard/blob/master/README.md
.. _`submódulos git`: http://git-scm.com/book/en/Git-Tools-Submodules
.. _`GitHub`: https://github.com/
.. _`repositorio minimalista`: http://git-scm.com/book/en/Git-Basics-Getting-a-Git-Repository
.. _`Gitolite`: https://github.com/sitaramc/gitolite
.. _`Github .gitignore`: https://help.github.com/articles/ignoring-files
