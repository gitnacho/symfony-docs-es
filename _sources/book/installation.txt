.. index::
   single: Instalando

Instalando y configurando *Symfony*
===================================

El objetivo de este capítulo es empezar a trabajar con una aplicación funcionando incorporada en lo alto de *Symfony*. Afortunadamente, *Symfony* dispone de «distribuciones», que son proyectos *Symfony* funcionales desde el «arranque», los cuales puedes descargar y comenzar a desarrollar inmediatamente.

.. tip::

    Si estás buscando instrucciones sobre la mejor manera de crear un nuevo proyecto y guardarlo vía el control de código fuente, consulta `Usando control de código fuente`_.

Instalando una distribución de *Symfony2*
-----------------------------------------

.. tip::

    En primer lugar, comprueba que tienes instalado y configurado un servidor web (como *Apache*) con la más reciente versión posible de *PHP* (*PHP 5.3.8* o preferiblemente más reciente). Para más información sobre los requisitos de *Symfony2*, consulta los :doc:`requisitos en la referencia </reference/requirements>`. Para más información sobre la configuración de la raíz de los documentos de tu servidor web específico, consulta la siguiente documentación: `Apache`_ | `Nginx`_ .

Los paquetes de las «distribuciones» de *Symfony2*, son aplicaciones totalmente funcionales que incluyen las bibliotecas del núcleo de *Symfony2*, una selección de útiles paquetes, una sensible estructura de directorios y alguna configuración predeterminada. Al descargar una distribución *Symfony2*, estás descargando el esqueleto de una aplicación funcional que puedes utilizar inmediatamente para comenzar a desarrollar tu aplicación.

Empieza por visitar la página de descarga de *Symfony2* en `http://symfony.com/download`_.
En esta página, puedes encontrar la *edición estándar de Symfony*, que es la distribución principal de *Symfony2*. Hay 2 maneras en las que puedes iniciar tu proyecto:

Opción 1) ``Composer``
~~~~~~~~~~~~~~~~~~~~~~

`Composer`_ es una biblioteca de administración de dependencias para *PHP*, la cual puedes utilizar para descargar la *Edición estándar de Symfony2*.

Comienza `descargando Composer`_ en algún lugar de tu ordenador local. Si tienes instalado :command:`curl`, es tan fácil como:

.. code-block:: bash

    % curl -s https://getcomposer.org/installer | php

.. note::

    Si tu ordenador no está listo para utilizar ``Composer``, verás algunas recomendaciones cuándo ejecutes esta orden. Sigue las recomendaciones hasta lograr que ``Composer`` trabaje correctamente.

``Composer`` es un archivo *PHAR* ejecutable, el cual puedes utilizar para descargar la distribución estándar:

.. code-block:: bash

    php composer.phar create-project symfony/framework-standard-edition /ruta/a/raizweb/Symfony dev-master

.. tip::

    Para una versión específica, sustituye `dev-master` con la más reciente versión de *Symfony* (por ejemplo, 2.1.1). Para detalles, ve la `Página de instalación de Symfony`_

.. tip::

    Para descargar más rápido los archivos de proveedores y sin directorios innecesarios (p. ej. «Tests»), añade la opción ``--prefer-dist`` al final de cualquier orden de ``Composer``.

Esta orden puede tardar varios minutos en su ejecución debido a que ``Composer`` descarga la distribución estándar junto con todas las bibliotecas de terceros que necesita. Cuándo termine, tendrás un directorio parecido a este:

.. code-block:: text

    ruta/al/directorio/web-raiz/ <- tu directorio raíz del servidor web
        Symfony/ <- el archivo extraído
            app/
                cache/
                config/
                logs/
            src/
                ...
            vendor/
                ...
            web/
                app.php
                ...

Opción 2) Descarga un archivo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

También puedes descargar un archivo de la Edición estándar. En este caso, necesitas hacer dos elecciones:

* Descargar o bien un archivo ``.tgz`` o ``.zip`` --- ambos son equivalentes, descarga aquel con el que te sientas más cómodo---;

* Descargar la distribución con o sin ``vendors``. Si estás planeando utilizar más bibliotecas o paquetes de terceros y gestionarlas vía ``Composer``, probablemente tienes que descarga la versión «sin ``vendors``».

Descarga uno de los archivos en algún lugar bajo el directorio raíz de tu servidor web local y descomprímelo. Desde una línea de ordenes de *UNIX*, esto se puede hacer con una de las siguientes ordenes (sustituye ``###`` con el nombre del archivo real):

.. code-block:: bash

    # para un archivo .tgz
    $ tar zxvf Symfony_Standard_Vendors_2.1.###.tgz

    # para un archivo .zip
    $ unzip Symfony_Standard_Vendors_2.1.###.zip

Si descargaste el archivo «sin ``vendors``», definitivamente necesitarás leer la siguiente sección.

.. note::

    Fácilmente puedes sustituir la estructura de directorios predefinida. Consulta :doc:`/cookbook/configuration/override_dir_structure` para más información.

.. _installation-updating-vendors:

Actualizando ``vendors``
~~~~~~~~~~~~~~~~~~~~~~~~

Al llegar a este punto,  has descargado un proyecto *Symfony* plenamente funcional en el cual puedes comenzar a desarrollar tu propia aplicación. Un proyecto *Symfony* depende de una serie de bibliotecas externas. Estas se han descargado al directorio ``vendor/`` de tu proyecto vía una biblioteca llamada `Composer`_.

Dependiendo de cómo  descargaste *Symfony*, ahora posiblemente o no necesites actualizar tus proveedores. Pero, actualizar tus proveedores siempre es seguro, y garantiza que tienes todas las bibliotecas de proveedores necesarias.

Paso 1: Consigue `Composer`_ (El nuevo gran sistema de empacado *PHP*)

.. code-block:: bash

    curl -s http://getcomposer.org/installer | php

Asegúrate de descargar :file:`composer.phar` en el mismo directorio dónde se encuentra el archivo :file:`composer.json` (este, por omisión, es el directorio raíz de tu proyecto *Symfony*).

Paso 2: Instala las bibliotecas de terceros

.. code-block:: bash

    $ php composer.phar install

Esta orden descarga todas las bibliotecas de terceros necesarias ---incluyendo al mismo *Symfony*--- en el directorio :file:`vendor/`.

.. note::

    Si no tienes instalado ``curl``, simplemente puedes descargar manualmente el archivo ``instalador`` de http://getcomposer.org/installer. Coloca ese archivo en tu proyecto y luego ejecuta:

    .. code-block:: bash

        php installer
        php composer.phar install

.. tip::

    Cuando ejecutes ``php composer.phar install`` o ``php composer.phar update``, composer ejecutará las ordenes postinstalación/postactualización para limpiar la caché e instalar los activos. De manera predeterminada, los activos se copiarán a tu directorio ``web``. Para crear enlaces simbólicos en lugar de copiar los activos, puedes añadir una entrada en el nodo ``extra`` de tu archivo :file:`composer.json` con la clave ``symfony-assets-install`` y el valor ``symlink``:

    .. code-block:: json

        "extra": {
            "symfony-app-dir": "app",
            "symfony-web-dir": "web",
            "symfony-assets-install": "symlink"
        }

    Al suministrar ``relative`` en lugar de ``symlink`` a ``symfony-assets-install``, la orden generará enlaces simbólicos relativos.

Instalando y configurando
~~~~~~~~~~~~~~~~~~~~~~~~~

En este punto, todas las bibliotecas de terceros necesarias ahora viven en el directorio :file:`vendor/`. También tienes una instalación predeterminada de la aplicación en :file:`app/` y algunos ejemplos de código dentro de :file:`src/`.

*Symfony2* viene con una interfaz visual para probar la configuración del servidor, muy útil para ayudarte a solucionar problemas relacionados con la configuración de tu servidor web y *PHP* para utilizar *Symfony*. Usa la siguiente *URL* para examinar tu configuración:

.. code-block:: text

    http://localhost/config.php

Si hay algún problema, corrígelo antes de continuar.

.. sidebar:: Configurando permisos

    Un problema común es que ambos directorios ``app/cache`` y ``app/logs`` deben tener permiso de escritura, tanto para el servidor web cómo para la línea de ordenes del usuario. En un sistema *UNIX*, si el usuario del servidor *web* es diferente de tu usuario de la línea de ordenes, puedes ejecutar las siguientes ordenes una sola vez en el proyecto para garantizar que los permisos se configuran correctamente.

    **Ten en cuenta que no todos los servidores web corren como el usuario** ``www-data`` como en los ejemplos de abajo. En cambio, verifica qué usuario está corriendo *tu* servidor *web* y úsalo en lugar de ``www-data``.

    En un sistema *UNIX*, esto se puede hacer con una de las siguientes órdenes:

    .. code-block:: bash

        $ ps aux | grep httpd

    o

    .. code-block:: bash

        $ ps aux | grep apache

    **1. Usando ACL en un sistema que admite chmod +a**

    Muchos sistemas te permiten utilizar la orden chmod +a. Intenta esta orden primero, y si se produce un error --- intenta el siguiente método: Asegurate de cambiar ``www-data`` por el usuario de tu servidor *web* en la primer orden ``chmod``:

    .. code-block:: bash

        $ rm -rf app/cache/*
        $ rm -rf app/logs/*

        $ sudo chmod +a "www-data allow delete,write,append,file_inherit,directory_inherit" app/cache app/logs
        $ sudo chmod +a "`whoami` allow delete,write,append,file_inherit,directory_inherit" app/cache app/logs

    **2. Usando ACL en un sistema que no es compatible con chmod +a**

    Algunos sistemas, no son compatibles con ``chmod +a``, pero son compatibles con otra utilidad llamada ``setfacl``. Posiblemente tengas que habilitar la `compatibilidad con ACL`_ en tu partición e instalar :dfn:`setfacl` antes de usarlo (como es el caso de *Ubuntu*), de esta manera:

    .. code-block:: bash

        $ sudo setfacl -R -m u:www-data:rwx -m u:`whoami`:rwx app/cache app/logs
        $ sudo setfacl -dR -m u:www-data:rwx -m u:`whoami`:rwx app/cache app/logs

    **3. Sin usar ACL**

    Si no tienes acceso para modificar los directorios *ACL*, tendrás que cambiar la ``umask`` para que los directorios ``cache/`` y ``logs/`` se puedan escribir por el grupo o por cualquiera (dependiendo de si el usuario del servidor web y el usuario de la línea de ordenes están en el mismo grupo o no). Para ello, pon la siguiente línea al comienzo de los archivos ``app/console``, ``web/app.php`` y ``web/app_dev.php``::

        umask(0002); // Esto permitirá que los permisos sean 0775

        // o

        umask(0000); // Esto permitirá que los permisos sean 0777

    Ten en cuenta que el uso de *ACL* se recomienda cuando tienes acceso a ellos en el servidor porque cambiar la ``umask`` no es seguro en subprocesos.

Cuando todo esté listo, haz clic en el enlace «Visita la página de Bienvenida» para ver tu primer aplicación «real» en *Symfony2*:

.. code-block:: text

    http://localhost/app_dev.php/

¡*Symfony2* debería darte la bienvenida y felicitarte por tu arduo trabajo hasta el momento!

.. image:: /images/quick_tour/welcome.png

Empezando a desarrollar
-----------------------

Ahora que tienes una aplicación *Symfony2* completamente funcional, ¡puedes comenzar el desarrollo! Tu distribución puede contener algún código de ejemplo ---revisa el archivo :file:`README.md` incluido con la distribución (ábrelo como un archivo de texto) para saber qué código de ejemplo incluye tu distribución y cómo lo puedes eliminar más tarde.

Si eres nuevo en *Symfony*, alcánzanos en «:doc:`page_creation`», donde aprenderás a crear páginas, cambiar la configuración, y todo lo que necesitarás en tu nueva aplicación.

Además, asegúrate de revisar el :doc:`Recetario </cookbook/index>`, el cual contiene una amplia variedad de artículos que solucionan problemas específicos con *Symfony*.

Usando control de código fuente
-------------------------------

Si estás utilizando un sistema de control de versiones como ``Git`` o ``Subversion``, puedes configurar tu sistema de control de versiones y empezar a confirmar cambios al proyecto normalmente. La *edición estándar de Symfony* **es** el punto de partida para tu nuevo proyecto.

Para instrucciones específicas sobre la mejor manera de configurar el proyecto para almacenarlo en *git*, consulta :doc:`/cookbook/workflow/new_project_git`.

Ignorando el directorio :file:`vendor/`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Si has descargado el archivo *sin proveedores*, puedes omitir todo el directorio :file:`vendor/` y no confirmarlo al control de versiones. Con ``Git``, esto se logra creando un archivo :file:`.gitignore` y añadiendo lo siguiente:

.. code-block:: text

    /vendor/

Ahora, el directorio de proveedores no será confirmado al control de versiones. Esto está muy bien (en realidad, ¡es genial!) porque cuando alguien más clone o coteje el proyecto, él/ella simplemente puede ejecutar el archivo ``php composer.phar install`` para descargar todas las bibliotecas de proveedores necesarias.

.. _`compatibilidad con ACL`: https://help.ubuntu.com/community/FilePermissionsACLs
.. _`http://symfony.com/download`: http://symfony.com/download
.. _`Git`: http://git-scm.com/
.. _`GitHub Bootcamp`: http://help.github.com/set-up-git-redirect
.. _`Composer`: http://getcomposer.org/
.. _`descargando Composer`: http://getcomposer.org/download/
.. _`Apache`: http://httpd.apache.org/docs/current/mod/core.html#documentroot
.. _`Nginx`: http://wiki.nginx.org/Symfony
.. _`Página de instalación de Symfony`:    http://symfony.com/download
