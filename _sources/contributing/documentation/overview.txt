Colaborando en la documentación
===============================

La documentación es tan importante como el código. Esta sigue exactamente los mismos principios:
una vez y sólo una, pruebas, facilidad de mantenimiento,
extensibilidad, optimización y reconstrucción sólo por nombrar algunos. Y, por supuesto, la documentación tiene errores, errores tipográficos, guías difíciles de leer y mucho más.

Colaborando
-----------

Antes de colaborar, necesitas familiarizarte con el :doc:`lenguaje de marcado <format>` empleado en la documentación.

La documentación de *Symfony2* se encuentra alojada en *GitHub*:

.. code-block:: text

    https://github.com/symfony/symfony-docs

Si deseas enviar un parche `bifurca`_ el repositorio oficial en *GitHub* y luego clona tu bifurcación:

.. code-block:: bash

    $ git clone git://github.com/TUNOMBRE/symfony-docs.git

Compatible con el código de fuente de *Symfony*, el repositorio de la documentación está dividido en tres ramas: ``2.0`` para la versión actual de *Symfony 2.0.x*, ``2.1`` para la versión actual de *Symfony 2.1.x* y ``master`` como la rama de desarrollo para las próximas versiones.

A menos que estés documentando una nueva característica para *Symfony 2.1*, todos tus cambios siempre deben estar basados en la rama *2.0*, en lugar de en la rama ``master``. Para ello activa la rama 2.0 antes del siguiente paso:

.. code-block:: bash

    $ git checkout 2.0

A continuación, crea una rama dedicada a tus cambios (para mantenerla organizada):

.. code-block:: bash

    $ git checkout -b improving_foo_and_bar

Ahora puedes hacer los cambios directamente en esta rama y enviarlos ahí. Cuando hayas terminado, impulsa esta rama a *tu* *GitHub* e inicia una petición de atracción.
La petición de atracción debe ser entre tu rama ``mejorando_foo_y_bar`` y la rama ``maestra`` de ``Symfony-docs``.

.. image:: /images/docs-pull-request.png
   :align: center

Si has hecho tus cambios basándote en la rama 2.0, entonces necesitas confirmar cambiar la rama base para que sea *2.0* en la página anterior:

.. image:: /images/docs-pull-request-change-base.png
   :align: center

.. note::

   Todos los cambios hechos a la rama 2.0 serán fusionados a 2.1 la cuál en turno será fusionada a la rama maestra para la siguiente liberación en una base semanal.

*GitHub* aborda el tema de las `peticiones de atracción`_ en detalle.

.. note::

    La documentación de *Symfony2* está bajo una licencia Creative Commons Attribution-Share Alike 3.0 Unported :doc:`Licencia <license>`.

.. tip::

    Por favor, ten paciencia. Esto pueda tomar de 15 minutos a varios días para que tus cambios aparezcan en el sitio web symfony.com después de que el equipo de documentación fusione tu petición de atracción. Puedes comprobar si tus cambios introducen algunas cuestiones sobre el marcado yendo a la página de `Errores en la generación de documentación`_ (esta se actualiza en Francia cada noche a las 3 a.m. cuando el servidor vuelve a generar la documentación).

Estándares
----------

Con el fin de ayudar lo más posible al lector y crear código de ejemplo que se vea y sienta familiar, debes seguir estas reglas:

* El código sigue los :doc:`Estándares de codificación de Symfony </contributing/code/standards>` así como los  `Estándares de codificación de Twig`_;
* Cada línea se debe romper aproximadamente después de la primer palabra que rebase el 72° carácter (por lo tanto muchas líneas terminaran siendo de 72-78 caracteres);
* Para evitar desplazamiento horizontal en bloques de código, preferimos romper una línea correctamente si rebasa el 85º carácter;
* Cuándo pliegues una o más líneas de código, coloca ``...`` en un comentario en el punto del pliegue. Estos comentarios son: ``// ...`` (php), ``# ...`` (yaml/bash), ``{# ... #}``
  (twig), ``<!-- ... -->`` (xml/html), ``; ...`` (ini), ``...`` (text);
* Cuándo pliegues una parte de una línea, p. ej. un valor variable, coloca ``...`` (sin comentario) en el sitio del pliegue;
* Descripción del código plegado: (opcional) si pliegas varias líneas: la descripción del pliegue se puede colocar después del ``...`` si sólo pliegas una parte de una línea: la descripción se puede colocar antes de la línea;
* Si se considera útil, un bloque de código ``codeblock`` debe comenzar con un comentario que contenga el nombre del archivo en el bloque de código. No coloques una línea de espacio en blanco después de este comentario, a no ser que la próxima línea también sea un comentario;
* Debes poner un ``$`` delante de cada línea del intérprete;
* El atajo ``::`` es preferible sobre ``.. code-block:: php`` para comenzar un bloque de código *PHP*.
* Deberías utilizar la forma *tú* en vez de *nosotros*.

Un ejemplo::

    // src/Foo/Bar.php

    // ...
    class Bar
    {
        // ...

        public function foo($bar)
        {
            // ajusta foo al valor de bar
            $foo = ...;

            // ... comprueba si $bar tiene el valor correcto

            return $foo->baz($bar, ...);
        }
    }

.. note::

    * en *Yaml* debes dejar un espacio después de ``{`` y antes de ``}`` (p. ej. ``{ _controlador: ... }``),
      pero esto no lo debes hacer en Twig (p. ej. ``{'hola' : 'valor'}``).
    * Un arreglo de elementos es una parte de una línea, no una línea completa. Por lo tanto no debes usar ``// ...`` sino ``...,`` (La coma debido a los estándares de codificación)::

        array(
            'algún valor',
            ...,
        )

Informando un problema
----------------------

La contribución más sencilla que puedes hacer es reportar algún problema: un error, un error gramatical, un error en el código de ejemplo, una explicación omitida, etc.

Pasos a seguir:

* Reporta un error en el rastreador de fallos;

* *(Opcional)* Envía un parche.

Traduciendo
-----------

Lee el :doc:`documento dedicado <translations>`.

.. _`bifurca`: https://help.github.com/articles/fork-a-repo
.. _`peticiones de atracción`: https://help.github.com/articles/using-pull-requests
.. _`Errores en la generación de documentación`: http://symfony.com/doc/build_errors
.. _`Estándares de codificación de Twig`: http://gitnacho.github.com/Twig/coding_standards.html
