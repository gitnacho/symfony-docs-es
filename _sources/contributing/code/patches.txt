Enviando un parche
==================

Los parches son la mejor manera de proporcionar una corrección de error o de proponer mejoras a *Symfony2*.

Lista de verificación
---------------------

El propósito de la lista de verificación es garantizar que tus contribuciones se pueden revisar sin necesidad de bucles de retroalimentación para asegurarte que tus aportaciones se puedan incluir en *Symfony2* lo más rápido posible.

El título de la solicitud de atracción se debe prefijar con el nombre del componente o paquete relacionado.

.. code-block:: text

    [Componente] Una breve descripción como título aquí.

Un título de ejemplo se podría parecer a este:

.. code-block:: text

    [Form] Add selectbox field type.

.. tip::

    Por favor, usa "[WIP]" en el título si no has completado el envío o si las pruebas están incompletas o aún no las supera.

Todas las solicitudes de atracción deben incluir la siguiente plantilla en la descripción de la petición:

.. code-block:: text

    Bug fix: [yes|no]
    Feature addition: [yes|no]
    Backwards compatibility break: [yes|no]
    Symfony2 tests pass: [yes|no]
    Fixes the following tickets: [lista separada con comas de boletos corregidos por el PR]
    Todo: [lista de todos los pendientes]

Un envío de ejemplo se podría ver como el siguiente:

.. code-block:: text

    Bug fix: no
    Feature addition: yes
    Backwards compatibility break: no
    Symfony2 tests pass: yes
    Fixes the following tickets: -
    Todo: -

¡Gracias por llenar e incluir la plantilla en tu presentación!

.. tip::

    Todas las características adicionales se deben enviar a la rama "master", mientras que todas las correcciones de errores se deben enviar a la rama más antigua aún activa. Además los envíos ---como regla general--- no deben romper la compatibilidad hacia atrás.

.. tip::

    Para obtener automáticamente la rama de la característica a prueba, puedes añadir tu bifurcación a `travis-ci.org`_. Sólo inicia sesión utilizando tu cuenta de :file:`github.com` y luego, sencillamente indica un cambio para habilitar las pruebas automatizadas. En tu solicitud de atracción, en vez de especificar "*Symfony2 tests pass: [yes|no]*", la puedes enlazar al `icono de estado de travis-ci.org`_. Para más detalles, ve la `guía comenzando con travis-ci.org`_.

Configuración inicial
---------------------

Antes de trabajar en *Symfony2*, configura un entorno amigable con el siguiente software:

* Git;

* PHP version 5.3.2 o más reciente;

* PHPUnit 3.6.4 o más reciente.

Configura la información del usuario con tu nombre real y una dirección de correo electrónico operativa:

.. code-block:: bash

    $ git config --global user.name "Tu nombre"
    $ git config --global user.email tu@ejemplo.com

.. tip::

    Si eres nuevo en *Git*, es muy recomendable que leas el excelente libro `ProGit`_, que además es libre.

.. tip::

    Usuarios de Windows: al instalar *Git*, se te preguntará qué hacer con los finales de línea y te sugiere reemplazar todos los ``LF`` por ``CRLF``. ¡Esta es la opción incorrecta si deseas contribuir con *Symfony*! Seleccionar el método tal cual es tu mejor opción, puesto que *Git* convertirá tus saltos de línea a los del repositorio. Si ya has instalado *Git*, puedes comprobar el valor de esta opción escribiendo:

    .. code-block:: bash

        $ git config core.autocrlf

    Esto devolverá o bien ``"false"``, ``"input"`` o ``"true"``, ``"true"`` y ``"false"`` son valores incorrectos. Para fijarlo a otro valor, escribe:

    .. code-block:: bash

        $ git config --global core.autocrlf input

    Sustituye ``--global`` por ``--local`` si lo quieres fijar únicamente para el repositorio activo.

Obtén el código fuente de *Symfony2*:

* Crea una cuenta `GitHub`_ e ingresa;

* Consigue el `repositorio Symfony2`_ (haz clic en el botón "Fork");

* Después de concluida la "acción de bifurcar el núcleo", clona tu bifurcación a nivel local (esto creará un directorio `symfony`):

.. code-block:: bash

      $ git clone git@github.com:NOMBREUSUARIO/symfony.git

* Añade el repositorio anterior como ``remoto``:

.. code-block:: bash

      $ cd symfony
      $ git remote add upstream git://github.com/symfony/symfony.git

Ahora que *Symfony2* está instalado, comprueba que todas las pruebas unitarias pasan en tu entorno como se explica en el :doc:`documento <tests>` dedicado.

Trabajando en un parche
-----------------------

Cada vez que desees trabajar en un parche por un fallo o una mejora, necesitas crear una rama del tema:

La rama debe estar basada en la rama ``master`` si deseas agregar una nueva función. Pero si deseas corregir un fallo, utiliza la versión más antigua, pero aún mantenida de *Symfony* donde ocurre el fallo (como ``2.0``).

Crea la rama del tema con la siguiente orden:

.. code-block:: bash

    $ git checkout -b NOMBRE_RAMA master

O, si deseas proporcionar una corrección de error para la rama 2.0, en primer lugar, necesitas actualizar tu copia local a la rama `2.0` remota:

.. code-block:: bash

    $ git checkout -t origin/2.0

A continuación, puedes crear una nueva rama de la rama 2.0 para trabajar en la corrección del error:

.. code-block:: bash

    $ git checkout -b BRANCH_NAME 2.0

.. tip::

    Utiliza un nombre descriptivo para tu rama (``ticket_XXX`` donde ``XXX`` es el número del boleto, la cual es una buena convención para la corrección de errores).

La orden ``checkout`` anterior, automáticamente cambia el código a la rama recién creada (para ver la rama en que estás trabajando utiliza ``git branch``).

Trabaja en el código tanto como quieras y confirma tus cambios tanto como desees; pero ten en cuenta lo siguiente:

* Sigue los :doc:`estándares <standards>` de codificación (utiliza ``git diff --check`` para comprobar si hay espacios finales);

* Añade pruebas unitarias para probar que el error se corrigió o que la nueva característica realmente funciona;

* Haz confirmaciones de cambios atómicas y separadas lógicamente (usa el poder de ``git rebase`` para tener un historial limpio y lógico);

* Escribe mensajes de confirmación de cambios sustanciales.

.. tip::

    Un buen mensaje de confirmación de cambios sustancial está compuesto por un resumen (en la primera línea), seguido opcionalmente por una línea en blanco y una descripción más detallada. El resumen debe comenzar con el componente en el que estás trabajando entre corchetes (``[DependencyInjection]``, ``[FrameworkBundle]``, ...). Utiliza un verbo (``fixed...``, ``added...``, ...) para iniciar el resumen y no agregues un punto al final.

Enviando un parche
------------------

Antes de presentar tu revisión, actualiza tu rama (es necesario si te toma cierto tiempo terminar los cambios):

.. code-block:: bash

    $ git checkout master
    $ git fetch upstream
    $ git merge upstream/master
    $ git checkout NOMBRE_RAMA
    $ git rebase master

.. tip::

    Sustituye ``master`` con ``2.0`` si estás trabajando en una corrección de error

Al ejecutar la orden ``rebase``, posiblemente tengas que arreglar conflictos de fusión.
``git status`` te mostrará los archivos *sin fusionar*. Resuelve todos los conflictos, y luego continua el rebase:

.. code-block:: bash

    $ git add ... # Añade archivos resueltos
    $ git rebase --continue

Comprueba que todas las pruebas todavía pasan y empuja tu rama remota:

.. code-block:: bash

    $ git push origin NOMBRE_RAMA

Ahora puedes hablar de tu parche en la `lista de correo dev`_ o hacer una petición de atracción (que se debe hacer en el repositorio ``symfony/synfony``). Para facilitar el trabajo del equipo central, siempre incluye los componentes modificados en tu mensaje de petición de atracción, como en:

.. code-block:: text

    [Yaml] foo bar
    [Form] [Validator] [FrameworkBundle] foo bar

.. tip::

    Ten cuidado al momento de solicitar la atracción para ``symfony:2.0`` si deseas que el equipo del núcleo atraiga una corrección de error basada en la rama 2.0.

Si vas a enviar un correo electrónico a la lista de correo, no olvides hacer referencia a la *URL* de tu rama (``https://github.com/NOMBREDEUSUARIO/symfony.git NOMBRE_RAMA``) o la *URL* de la petición de atracción.

Basándote en la retroalimentación de la lista de correo o a través de la petición de atracción en *GitHub*, posiblemente tengas que rehacer el parche. Antes de volver a presentarlo, rebasa con ``upstream/master`` o ``upstream/2.0``, no los mezcles; y fuerza el empuje al origen:

.. code-block:: bash

    $ git rebase -f upstream/master
    $ git push -f origin NOMBRE_RAMA

.. note::

    al hacer un ``push -f`` (o ``--force``), siempre especifica el nombre de la rama explícitamente para evitar mezclar en otras ramas del repositorio (``--force`` le dice a *Git* que realmente quieres mezclar las cosas en lugar de hacerlo cuidadosamente).

A menudo, los moderadores te pedirán que "aplanes" tus confirmaciones de cambios. Lo cual significa que combines varias confirmaciones de cambios en una sola. Para ello, utiliza la orden ``rebase``:

.. code-block:: bash

    $ git rebase -i head~3
    $ git push -f origin NOMBRE_RAMA

Aquí, el número 3 debe ser igual a la cantidad de confirmaciones de cambios en tu rama. Después que escribas esta orden, aparecerá un editor mostrándote la lista de confirmaciones de cambios:

.. code-block:: text

    pick 1a31be6 first commit
    pick 7fc64b4 second commit
    pick 7d33018 third commit

Para revertir todas las confirmaciones de cambios a la primera, elimina la palabra ``"pick"`` antes de la segunda y última confirmación de cambios, y sustitúyela por la palabra ``"squash"`` o simplemente ``"s"``.
Cuando guardes, *GIt* iniciará el ``rebase``, y si tiene éxito, te pedirá que modifiques el mensaje de confirmación de cambios, que de manera predeterminada es una lista enumerando los mensajes de todas las confirmaciones. Cuando hayas terminado, ejecuta la orden ``push``.

.. note::

    Todos los parches que envíes se deben liberar bajo la licencia *MIT*, a menos que explícitamente lo especifiques en el código.

Todas las correcciones de fallos se fusionarán en las ramas de mantenimiento, también se fusionaran regularmente en las ramas más recientes. Por ejemplo, si envías un parche para la rama ``2.0``, el parche también será aplicado por el equipo central a la rama ``master``.

.. _`ProGit`:              http://progit.org/
.. _`GitHub`:              https://github.com/signup/free
.. _`repositorio Symfony2`: https://github.com/symfony/symfony
.. _`lista de correo dev`:    http://groups.google.com/group/symfony-devs
.. _travis-ci.org:       http://travis-ci.org
.. _`icono de estado de travis-ci.org`: http://about.travis-ci.org/docs/user/status-images/
.. _`guía comenzando con travis-ci.org`: http://about.travis-ci.org/docs/user/getting-started/