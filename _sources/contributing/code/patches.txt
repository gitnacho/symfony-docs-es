Enviando un parche
==================

Los parches son la mejor manera de proporcionar una corrección de error o de proponer mejoras a *Symfony2*.

Paso 1: Configura tu entorno
----------------------------

Instalando el software necesario
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Antes de trabajar en *Symfony2*, configura un entorno amigable con el siguiente software:

* Git;
* PHP version 5.3.2 o más reciente;
* PHPUnit 3.6.4 o más reciente.

Configura *Git*
~~~~~~~~~~~~~~~

Configura la información de usuario con tu nombre real y una dirección de correo electrónico operativa:

.. code-block:: bash

    $ git config --global user.name "Tu nombre"
    $ git config --global user.email tu@ejemplo.com

.. tip::

    Si eres nuevo en *Git*, es muy recomendable que leas el excelente libro `ProGit`_, que además es libre.

.. tip::

    Usuarios de Windows: al instalar *Git*, se te preguntará qué hacer con los finales de línea y te sugiere reemplazar todos los ``LF`` por ``CRLF``. ¡Esta es la opción incorrecta si deseas contribuir con *Symfony*! Seleccionar el método tal cual es tu mejor opción, puesto que *Git* convertirá tus saltos de línea a los del repositorio. Si ya has instalado *Git*, puedes comprobar el valor de esta opción escribiendo:

    .. code-block:: bash

        $ git config core.autocrlf

    Esto devolverá o bien ``"false"``, ``"input"`` o ``"true"``, ``"true"`` y ``"false"`` son valores incorrectos. Para fijarlo a otro valor, escribe:

    .. code-block:: bash

        $ git config --global core.autocrlf input

    Sustituye ``--global`` por ``--local`` si lo quieres fijar únicamente para el repositorio activo.

Consigue el código fuente de *Symfony*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Obtén el código fuente de *Symfony2*:

* Crea una cuenta `GitHub`_ e ingresa;

* Consigue el `repositorio Symfony2`_ (haz clic en el botón "Fork");

* Después de concluida la "acción de bifurcar el núcleo", clona tu bifurcación a nivel local (esto creará un directorio `symfony`):

.. code-block:: bash

      $ git clone git@github.com:NOMBREUSUARIO/symfony.git

* Añade el repositorio anterior como ``remoto``:

.. code-block:: bash

      $ cd symfony
      $ git remote add upstream git://github.com/symfony/symfony.git

Comprueba que pasa el banco de pruebas actual
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ahora que *Symfony2* está instalado, comprueba que todas las pruebas unitarias pasan en tu entorno como se explica en el :doc:`documento <tests>` dedicado.

Paso 2: Trabaja en tu parche
----------------------------

La Licencia
~~~~~~~~~~~

Antes de empezar, debes saber que todos los parches que envíes se deben liberar bajo la *Licencia MIT*, a menos que explícitamente lo especifiques en tus confirmaciones de cambios.

Eligiendo la rama adecuada
~~~~~~~~~~~~~~~~~~~~~~~~~~

Antes de trabajar en tu parche, debes determinar en cual rama necesitas trabajar. La rama debe estar basada en la rama ``master`` si deseas agregar una nueva característica. Pero, si deseas corregir un fallo, utiliza la versión más antigua, pero aún mantenida de *Symfony* donde ocurre el fallo (como ``2.0``).

.. note::

    Todas las correcciones de fallos se fusionarán en las ramas de mantenimiento y además se fusionaran regularmente en las ramas más recientes. Por ejemplo, si envías un parche para la rama ``2.0``, el parche también será aplicado por el equipo central a la rama ``master``.

Crea una rama para ese asunto
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Cada vez que desees trabajar en un parche para un fallo o una mejora, crea una rama para ese asunto:

.. code-block:: bash

    $ git checkout -b NOMBRE_RAMA master

O, si deseas proporcionar una corrección de fallo para la rama 2.0, en primer lugar, actualiza tu copia local a la rama `2.0`:

.. code-block:: bash

    $ git checkout -t origin/2.0

Luego, crea una nueva rama de la rama 2.0 para trabajar en la corrección del fallo:

.. code-block:: bash

    $ git checkout -b NOMBRE_RAMA 2.0

.. tip::

    Utiliza un nombre descriptivo para tu rama (``ticket_XXX`` donde ``XXX`` es el número del boleto, esta es una buena convención para la corrección de fallos).

La orden ``checkout`` anterior, automáticamente cambia el código a la rama recién creada (para ver la rama en que estás trabajando utiliza ``git branch``).

Trabaja en tu parche
~~~~~~~~~~~~~~~~~~~~

Trabaja en el código tanto como quieras y confirma tus cambios tanto como desees; pero ten en cuenta lo siguiente:

* Sigue los :doc:`estándares de codificación <standards>` (utiliza ``git diff --check`` para comprobar si hay espacios finales --- además lee el consejo más adelante);

* Añade pruebas unitarias para probar que el fallo se corrigió o que la nueva característica realmente funciona;

* Esfuérzate para no romper la compatibilidad hacia atrás (si debes hacerlo, trata de proporcionar una capa de compatibilidad para apoyar la manera antigua) --- los parches que rompen la compatibilidad con versiones anteriores tienen menos posibilidades de que se fusionen;

* Haz confirmaciones atómicas y separadas lógicamente (usa el poder de ``git rebase`` para tener un historial limpio y lógico);

* Aplana confirmaciones de cambios irrelevantes que estén a punto de  comprometer los estándares de codificación o corrigen fallos en tu propio código;

* No corrijas los estándares de codificación en algún código existente, ya que dificulta la revisión del código;

* Escribe buenos mensajes de confirmación (ve el consejo más adelante).

.. tip::

    Puedes consultar los estándares de codificación de tu parche ejecutando el archivo  ``check_cs`` incluido con el repositorio de Symfony:

    .. code-block:: bash

        $ ./check_cs fix

.. tip::

    Un buen mensaje de confirmación de cambios sustancial está compuesto por un resumen (en la primera línea), seguido opcionalmente por una línea en blanco y una descripción más detallada. El resumen debe comenzar con el componente en el que estás trabajando entre corchetes (``[DependencyInjection]``, ``[FrameworkBundle]``, ...). Utiliza un verbo (``fixed...``, ``added...``, ...) para iniciar el resumen y no agregues un punto al final.

Prepara tu parche para enviarlo
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Cuando tu parche no se trata de una corrección de fallo (cuando agregas una nueva característica o cambias una existente, por ejemplo), además debes incluir lo siguiente:

* Una explicación de los cambios en el/los archivo(s) CHANGELOG correspondiente(s);

* Una explicación sobre la manera de actualizar una aplicación existente en el/los archivo(s) *UPGRADE* correspondiente(s) si los cambios rompen la compatibilidad hacia atrás.

Paso 3: Envía tu parche
-----------------------

Siempre que sientas que tu parche esté listo para su presentación, sigue los siguientes pasos.

Reorganiza tu parche
~~~~~~~~~~~~~~~~~~~~

Antes de presentar tu revisión, actualiza tu rama (es necesario si te toma cierto tiempo terminar los cambios):

.. code-block:: bash

    $ git checkout master
    $ git fetch upstream
    $ git merge upstream/master
    $ git checkout NOMBRE_RAMA
    $ git rebase master

.. tip::

    Sustituye ``master`` con ``2.0`` si estás trabajando en una corrección de fallo

Al ejecutar la orden ``rebase``, posiblemente tengas que arreglar conflictos de fusión.
``git status`` te mostrará los archivos *sin fusionar*. Resuelve todos los conflictos, y luego continua el rebase:

.. code-block:: bash

    $ git add ... # Añade archivos resueltos
    $ git rebase --continue

Comprueba que todas las pruebas todavía pasan y envía a tu rama remota:

.. code-block:: bash

    $ git push origin NOMBRE_RAMA

Envía una petición de atracción
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Ahora puedes hacer una petición de atracción en el repositorio ``symfony/synfony`` de *Github*.

.. tip::

    Ten cuidado al momento de solicitar la atracción para ``symfony:2.0`` si deseas que el equipo central atraiga una corrección de fallo basada en la rama 2.0.

Para facilitar el trabajo del equipo central, siempre incluye los componentes modificados en tu mensaje (en inglés) de la petición de atracción, como en:

.. code-block:: text

    [Yaml] fixed something
    [Form] [Validator] [FrameworkBundle] added something

.. tip::

    Por favor, usa "[WIP]" en el título si no has completado el envío o si las pruebas están incompletas o aún no las supera.

La descripción de la solicitud de extracción deberá incluir la siguiente lista de comprobación para garantizar que las contribuciones se pueden revisar sin necesidad de ciclos de retroalimentación y que las contribuciones se pueden incluir en *Symfony2* tan pronto como sea posible:

.. code-block:: text

    Bug fix: [yes|no]
    Feature addition: [yes|no]
    Backwards compatibility break: [yes|no]
    Symfony2 tests pass: [yes|no]
    Fixes the following tickets: [lista separada con comas de boletos corregidos por el PR]
    Todo: [lista de todos los pendientes]
    License of the code: MIT
    Documentation PR: [La referencia a la documentación PR si la hay]

Un ejemplo de presentación de datos ahora se ve de la siguiente manera:

.. code-block:: text

    Bug fix: no
    Feature addition: yes
    Backwards compatibility break: no
    Symfony2 tests pass: yes
    Fixes the following tickets: #12, #43
    Todo: -
    License of the code: MIT
    Documentation PR: symfony/symfony-docs#123

En la descripción de tu petición de atracción, da tantos detalles como sea posible acerca de tus cambios (no dudes en dar ejemplos de código para ilustrar tus puntos). Si tu petición de atracción está a punto de añadir una nueva característica o modificar una existente, explica las razones para los cambios. La descripción de la petición de atracción ayuda a la revisión del código y sirve como referencia al fusionar el código (la descripción de la petición de atracción y todos tus comentarios asociados son parte del mensaje de confirmación de la fusión).

Además de este ``"código"`` de la petición de atracción, también debes enviar una petición de atracción al `repositorio de documentación`_ para actualizar la documentación cuando sea apropiado.

Revisando tu parche
~~~~~~~~~~~~~~~~~~~

Basándote en la retroalimentación sobre tu petición de atracción, posiblemente debas volver a trabajar en tu parche. Antes de volver a presentarlo, reorganiza con ``upstream/master`` o ``upstream/2.0``, no lo fusiones; y fuerza el envío al origen:

.. code-block:: bash

    $ git rebase -f upstream/master
    $ git push -f origin NOMBRE_RAMA

.. note::

    cuando haces un ``push --force``, **siempre** especifica el nombre de la rama de forma explícita para evitar dañar otras ramas en el repositorio (``--force`` le dice a *Git* que realmente quieres meterte con esas cosas por lo tanto hazlo con mucho cuidado).

A menudo, los moderadores te pedirán que "aplanes" tus confirmaciones de cambios. Lo cual significa que combines varias confirmaciones de cambios en una sola. Para ello, utiliza la orden ``rebase``:

.. code-block:: bash

    $ git rebase -i head~3
    $ git push -f origin NOMBRE_RAMA

Aquí, el número 3 debe ser igual a la cantidad de confirmaciones de cambios en tu rama. Después que escribas esta orden, aparecerá un editor mostrándote la lista de confirmaciones de cambios:

.. code-block:: text

    pick 1a31be6 first commit
    pick 7fc64b4 second commit
    pick 7d33018 third commit

Para revertir todas las confirmaciones de cambios a la primera, elimina la palabra ``"pick"`` antes de la segunda y última confirmación de cambios, y sustitúyela por la palabra ``"squash"`` o simplemente ``"s"``.
Cuando guardes, *Git* iniciará el rebase, y si tiene éxito, te pedirá que
edites el mensaje de confirmación, el cual de manera predefinida es una lista con todos los mensajes de las confirmaciones de cambios. Cuando hayas terminado, ejecuta la orden ``push``.

.. tip::

    Para probar automáticamente la rama de tu característica, puedes añadir tu bifurcación a `travis-ci.org`_. Sólo inicia sesión utilizando tu cuenta de :file:`github.com` y luego, sencillamente indica un cambio para habilitar las pruebas automatizadas. En tu petición de atracción, en vez de especificar "*Symfony2 tests pass: [yes|no]*", la puedes enlazar al `icono de estado de travis-ci.org`_. Para más detalles, ve la `guía comenzando con travis-ci.org`_. Esto se puede hacer fácilmente haciendo clic en el icono de la llave en la página de desarrollo de Travis. Primero, selecciona la rama de tu característica y luego copia la documentación en formato ``markdown`` a la descripción de tu *PR*.

.. _`ProGit`:                                http://progit.org/
.. _`GitHub`:                                https://github.com/signup/free
.. _`repositorio Symfony2`:                   https://github.com/symfony/symfony
.. _`lista de correo dev`:                      http://groups.google.com/group/symfony-devs
.. _travis-ci.org:                         http://travis-ci.org
.. _`icono de estado de travis-ci.org`:           http://about.travis-ci.org/docs/user/status-images/
.. _`guía comenzando con travis-ci.org`: http://about.travis-ci.org/docs/user/getting-started/
.. _`repositorio de documentación`:            https://github.com/symfony/symfony-docs
