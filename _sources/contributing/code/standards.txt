Estándares de codificación
==========================

Cuando aportes código a *Symfony2*, debes seguir sus estándares de codificación. Para no hacer el cuento largo, aquí está la regla de oro: **limítate el código Symfony2 existente**. La mayoría de los Paquetes de código abierto y librerías utilizadas por *Symfony2* también siguen las mismas pautas, y también deberías hacerlo.

Recuerda que la principal ventaja de los estándares es que cada pieza de código se ve y se siente familiar, no se trata de tal o cual sea más legible.

Ya que una imagen ---o algún código--- vale más que mil palabras, he aquí un pequeño ejemplo que contiene la mayoría de las funciones que se describen a continuación:

.. code-block:: php

    <?php

    /*
     * This file is part of the Symfony package.
     *
     * (c) Fabien Potencier <fabien@symfony.com>
     *
     * For the full copyright and license information, please view the LICENSE
     * file that was distributed with this source code.
     */

    namespace Acme;

    class Foo
    {
        const SOME_CONST = 42;

        private $foo;

        /**
         * @param string $dummy Some argument description
         */
        public function __construct($dummy)
        {
            $this->foo = $this->transform($dummy);
        }

        /**
         * @param string $dummy Some argument description
         * @return string|null Transformed input
         */
        private function transform($dummy)
        {
            if (true === $dummy) {
                return;
            }
            if ('string' === $dummy) {
                $dummy = substr($dummy, 0, 5);
            }

            return $dummy;
        }
    }

Estructura
----------

* Nunca utilices las etiquetas cortas (`<?`);

* No termines los archivos de clase con la etiqueta de cierre habitual ``?>``;

* La sangría se hace con pasos de cuatro espacios (las tabulaciones no están permitidas);

* Utiliza el carácter de salto de línea (``0x0A``) para terminar las líneas;

* Añade un solo espacio después de cada delimitador coma;

* No pongas espacios después de un paréntesis de apertura ni antes de uno de cierre;

* Añade un solo espacio alrededor de los operadores (``==``, ``&&``, ...);

* Añade un solo espacio antes del paréntesis de apertura de una palabra clave de control (``if``, ``else``, ``for``, ``while``, ...);

* Añade una línea en blanco antes de las declaraciones ``return``, a menos que el valor devuelto solo sea dentro de un grupo de declaraciones (tal como una declaración ``if``);

* No agregues espacios en blanco al final de las líneas;

* Usa llaves para indicar la estructura del cuerpo de control, independientemente del número de declaraciones que contenga;

* Coloca las llaves en su propia línea en la declaración de clases, métodos y funciones;

* Separa las declaraciones condicionales (``if``, ``else``, ...) y la llave de apertura con un solo espacio y sin ninguna línea en blanco;

* Declara expresamente la visibilidad para clases, métodos y propiedades (el uso de ``var`` está prohibido);

* Usa minúsculas para escribir las constantes nativas de *PHP*:  ``false``, ``true`` y ``null``. Lo mismo ocurre con ``array()``;

* Usa cadenas en mayúsculas para constantes con palabras separadas con guiones bajos;

* Define una clase por archivo --- esto no se aplica a las clases ayudantes privadas, de las cuales no se tiene la intención de crear una instancia desde el exterior y por lo tanto no les preocupa la norma *PSR-0*;

* Declara las propiedades de clase antes que los métodos;

* Declara los métodos públicos en primer lugar, a continuación, los protegidos y finalmente los privados.

Convenciones de nomenclatura
----------------------------

* Utiliza mayúsculas intercaladas ---sin guiones bajos--- en nombres de variable, función, método o argumentos;

* Usa guiones bajos para los nombres de opciones y parámetros;

* Utiliza espacios de nombres para todas las clases;

* Sufija interfaces con ``Interface``;

* Utiliza caracteres alfanuméricos y guiones bajos para los nombres de archivo;

* No olvides consultar el documento más detallado :doc:`conventions` para más consideraciones de nomenclatura subjetivas.

Documentación
-------------

* Añade bloques *PHPDoc* a todas las clases, métodos y funciones;

* Omite la etiqueta ``@return`` si el método no devuelve nada;

* Las anotaciones `@package` y `@subpackage` no se utilizan.

Licencia
--------

* *Symfony* se distribuye bajo la licencia *MIT*, y el bloque de la licencia tiene que estar presente en la parte superior de todos los archivos *PHP*, antes del espacio de nombres.
