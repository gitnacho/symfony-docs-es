``Min``
=======

Valida que un número dado es *mayor* que un número mínimo.

+----------------+--------------------------------------------------------------------+
| Aplica a       | :ref:`propiedad o método <validation-property-target>`             |
+----------------+--------------------------------------------------------------------+
| Opciones       | - `limit`_                                                         |
|                | - `message`_                                                       |
|                | - `invalidMessage`_                                                |
+----------------+--------------------------------------------------------------------+
| Clase          | :class:`Symfony\\Component\\Validator\\Constraints\\Min`           |
+----------------+--------------------------------------------------------------------+
| Validador      | :class:`Symfony\\Component\\Validator\\Constraints\\MinValidator`  |
+----------------+--------------------------------------------------------------------+

Uso básico
----------

Para verificar que el campo ``edad`` de una clase es ``18`` o más, puedes agregar lo siguiente:

.. configuration-block::

    .. code-block:: yaml

        # src/Acme/EventBundle/Resources/config/validation.yml
        Acme\EventBundle\Entity\Participant:
            properties:
                edad:
                    - Min: { limit: 18, message: You must be 18 or older to enter. }

    .. code-block:: php-annotations

        // src/Acme/EventBundle/Entity/Participant.php
        use Symfony\Component\Validator\Constraints as Assert;

        class Participant
        {
            /**
             * @Assert\Min(limit = "18", message = "You must be 18 or older to enter")
             */
             protected $age;
        }

Opciones
--------

``limit``
~~~~~~~~~

**tipo**: ``integer`` [:ref:`default option<validation-default-option>`]

Esta opción requerida es el valor ``mínimo``. La validación fallará si el valor es **menor** que este valor ``mínimo``.

``message``
~~~~~~~~~~~

**tipo**: ``string`` **predeterminado**: ``This value should be {{ limit }} or more`` (``Este valor debe ser {{ limit }} o más``)

El mensaje que se mostrará si el valor subyacente es menor que la opción `limit`_.

``invalidMessage``
~~~~~~~~~~~~~~~~~~

**tipo**: ``string`` **predeterminado**: ``This value should be a valid number`` (``Este valor debe ser un número válido``)

El mensaje que se mostrará si el valor subyacente no es un número (por medio de la función `is_numeric`_ de *PHP*).

.. _`is_numeric`: http://www.php.net/manual/es/function.is-numeric.php