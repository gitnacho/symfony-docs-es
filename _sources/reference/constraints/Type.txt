``Type``
========

Valida que un valor es de un tipo de dato específico. Por ejemplo, si una variable debe ser un ``array``, puedes utilizar esta restricción con la opción ``type`` para validarla.

+----------------+---------------------------------------------------------------------+
| Aplica a       | :ref:`propiedad o método <validation-property-target>`              |
+----------------+---------------------------------------------------------------------+
| Opciones       | - :ref:`type <reference-constraint-type-type>`                      |
|                | - `message`_                                                        |
+----------------+---------------------------------------------------------------------+
| Clase          | :class:`Symfony\\Component\\Validator\\Constraints\\Type`           |
+----------------+---------------------------------------------------------------------+
| Validador      | :class:`Symfony\\Component\\Validator\\Constraints\\TypeValidator`  |
+----------------+---------------------------------------------------------------------+

Uso básico
----------

.. configuration-block::

    .. code-block:: yaml

        # src/BlogBundle/Resources/config/validation.yml
        Acme\BlogBundle\Entity\Author:
            properties:
                edad:
                    - Type:
                        type: integer
                        message: The value {{ value }} is not a valid {{ type }}.

    .. code-block:: php-annotations

       // src/Acme/BlogBundle/Entity/Author.php
       namespace Acme\BlogBundle\Entity;
       
       use Symfony\Component\Validator\Constraints as Assert;

       class Author
       {
           /**
            * @Assert\Type(type="integer", message="The value {{ value }} is not a valid {{ type }}.")
            */
            protected $age;
       }

Opciones
--------

.. _reference-constraint-type-type:

``type``
~~~~~~~~

**tipo**: ``string`` [:ref:`default option<validation-default-option>`]

Esta opción requerida es el nombre de clase completo o uno de los tipos de datos *PHP* según lo determinado por las funciones ``is_`` de *PHP*.

  * `array <http://php.net/is_array>`_
  * `bool <http://php.net/is_bool>`_
  * `callable <http://php.net/is_callable>`_
  * `float <http://php.net/is_float>`_ 
  * `double <http://php.net/is_double>`_
  * `int <http://php.net/is_int>`_ 
  * `integer <http://php.net/is_integer>`_
  * `long <http://php.net/is_long>`_
  * `null <http://php.net/is_null>`_
  * `numeric <http://php.net/is_numeric>`_
  * `object <http://php.net/is_object>`_
  * `real <http://php.net/is_real>`_
  * `resource <http://php.net/is_resource>`_
  * `scalar <http://php.net/is_scalar>`_
  * `string <http://php.net/is_string>`_
  
message
~~~~~~~

**tipo**: ``string`` **predeterminado**: ``This value should be of type {{ type }}`` (``Este valor debe ser de tipo {{ type }}``)

El mensaje si el dato subyacente no es del tipo dado.