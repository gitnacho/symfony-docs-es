Correo electrónico
==================

Valida que un valor es una dirección de correo electrónico válida. El valor subyacente se convierte en una cadena antes de validarlo.

+----------------+---------------------------------------------------------------------+
| Aplica a       | :ref:`propiedad o método <validation-property-target>`              |
+----------------+---------------------------------------------------------------------+
| Opciones       | - `message`_                                                        |
|                | - `checkMX`_                                                        |
|                | - `checkHost`_                                                      |
+----------------+---------------------------------------------------------------------+
| Clase          | :class:`Symfony\\Component\\Validator\\Constraints\\Email`          |
+----------------+---------------------------------------------------------------------+
| Validador      | :class:`Symfony\\Component\\Validator\\Constraints\\EmailValidator` |
+----------------+---------------------------------------------------------------------+

Uso básico
----------

.. configuration-block::

    .. code-block:: yaml

        # src/BlogBundle/Resources/config/validation.yml
        Acme\BlogBundle\Entity\Author:
            properties:
                email:
                    - Email:
                        mensaje: The email "{{ value }}" is not a valid email.
                        checkMX: true
    .. code-block:: xml

        <!-- src/Acme/BlogBundle/Resources/config/validation.xml -->
        <?xml version="1.0" encoding="UTF-8" ?>
        <constraint-mapping xmlns="http://symfony.com/schema/dic/constraint-mapping"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://symfony.com/schema/dic/constraint-mapping http://symfony.com/schema/dic/constraint-mapping/constraint-mapping-1.0.xsd">

            <class name="Acme\BlogBundle\Entity\Author">
                <property name="email">
                    <constraint name="Email">
                        <option name="message">The email "{{ value }}" is not a valid email.</option>
                        <option name="checkMX">true</option>
                    </constraint>
                </property>
            </class>
        </constraint-mapping>

    .. code-block:: php-annotations

        // src/Acme/BlogBundle/Entity/Author.php
        namespace Acme\BlogBundle\Entity;

        use Symfony\Component\Validator\Constraints as Assert;

        class Autor
        {
            /**
             * @Assert\Email(
             *     message = "The email '{{ value }}' is not a valid email.",
             *     checkMX = true
             * )
             */
             protected $email;
        }

    .. code-block:: php

        // src/Acme/BlogBundle/Entity/Author.php
        namespace Acme\BlogBundle\Entity;
        
        use Symfony\Component\Validator\Mapping\ClassMetadata;
        use Symfony\Component\Validator\Constraints as Assert;

        class Autor
        {
            public static function loadValidatorMetadata(ClassMetadata $metadata)
            {
                $metadata->addPropertyConstraint('email', new Assert\Email(array(
                    'message' => 'The email "{{ value }}" is not a valid email.',
                    'check'   => true,
                )));
            }
        }

Opciones
--------

``message``
~~~~~~~~~~~

**tipo**: ``string`` **predefinido**: ``This value is not a valid email address`` (``Este valor no es una dirección de correo electrónico válida``)

Este mensaje se muestra si los datos subyacentes no son una dirección de correo electrónico válida.

``checkMX``
~~~~~~~~~~~

**tipo**: ``Boolean`` **predeterminado**: ``false``

Si es ``true``, entonces puedes utilizar la función :phpfunction:`checkdnsrr` de *PHP* para comprobar la validez de los registros *MX* del servidor del correo electrónico dado.

``checkHost``
~~~~~~~~~~~~~

.. versionadded:: 2.1
    La opción ``checkHost`` se añadió en *Symfony 2.1*

**tipo**: ``Boolean`` **predeterminado**: ``false``

Si es ``true``, entonces puedes utilizar la función :phpfunction:`checkdnsrr` de *PHP* para comprobar la validez de los registros *MX*, *A* o *AAAA* del servidor del correo electrónico dado.
