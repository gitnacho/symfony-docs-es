``MinLength``
=============

.. caution::

    La restricción ``MinLength`` está depreciada desde la versión 2.1 y será eliminada en *Symfony 2.3*. En su lugar usa :doc:`/reference/constraints/Length` con la opción ``min``.

Valida que la longitud de una cadena por lo menos es tan larga como el límite dado.

+----------------+-------------------------------------------------------------------------+
| Aplica a       | :ref:`propiedad o método <validation-property-target>`                  |
+----------------+-------------------------------------------------------------------------+
| Opciones       | - `limit`_                                                              |
|                | - `message`_                                                            |
|                | - `charset`_                                                            |
+----------------+-------------------------------------------------------------------------+
| Clase          | :class:`Symfony\\Component\\Validator\\Constraints\\MinLength`          |
+----------------+-------------------------------------------------------------------------+
| Validador      | :class:`Symfony\\Component\\Validator\\Constraints\\MinLengthValidator` |
+----------------+-------------------------------------------------------------------------+

Uso básico
----------

.. configuration-block::

    .. code-block:: yaml

        # src/Acme/BlogBundle/Resources/config/validation.yml
        Acme\BlogBundle\Entity\Blog:
            properties:
                firstName:
                    - MinLength: { limit: 3, message: "Your name must have at least {{ limit}} characters." }

    .. code-block:: php-annotations

        // src/Acme/BlogBundle/Entity/Blog.php
        namespace Acme\BlogBundle\Entity;

        use Symfony\Component\Validator\Constraints as Assert;

        class Blog
        {
            /**
             * @Assert\MinLength(
             *     limit=3,
             *     message="Your name must have at least {{ limit}} characters."
             * )
             */
            protected $summary;
        }

    .. code-block:: xml

        <!-- src/Acme/BlogBundle/Resources/config/validation.xml -->
        <class name="Acme\BlogBundle\Entity\Blog">
            <property name="summary">
                <constraint name="MinLength">
                    <option name="limit">3</option>
                    <option name="message">Your name must have at least {{ limit }} characters.</option>
                </constraint>
            </property>
        </class>

    .. code-block:: php

        // src/Acme/BlogBundle/Entity/Blog.php
        namespace Acme\BlogBundle\Entity;

        use Symfony\Component\Validator\Mapping\ClassMetadata;
        use Symfony\Component\Validator\Constraints as Assert;

        class Blog
        {
            public static function loadValidatorMetadata(ClassMetadata $metadata)
            {
                $metadata->addPropertyConstraint('summary', new Assert\MinLength(array(
                    'limit'   => 3,
                    'message' => 'Your name must have at least {{ limit }} characters.',
                )));
            }
        }

Opciones
--------

``limit``
~~~~~~~~~

**tipo**: ``integer`` [:ref:`default option<validation-default-option>`]

Esta opción requerida es el valor ``mínimo``. La validación fallará si la longitud de la cadena dada es **menor** de este número.

``message``
~~~~~~~~~~~

**tipo**: ``string`` **predefinido**: ``This value is too short. It should have {{ limit }} characters or more`` (``Este valor es demasiado corto. Debería tener {{ limit }} caracteres o más``)

El mensaje que se mostrará si la cadena subyacente tiene una longitud menor que la opción `limit`_.

``charset``
~~~~~~~~~~~

**tipo**: ``charset`` **default**: ``UTF-8``

Si está instalada la extensión ``mbstring`` de *PHP*, entonces se utiliza la función :phpfunction:`mb_strlen` de *PHP* para calcular la longitud de la cadena. El valor de la opción ``charset`` se pasa como segundo argumento a esa función.
