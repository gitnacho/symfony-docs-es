``Callback``
============

El propósito de la afirmación ``Callback`` es permitirte crear reglas de validación completamente personalizadas y asignar errores de validación a campos específicos de tu objeto. Si estás utilizando la validación con formularios, esto significa que puedes hacer que estos errores personalizados se muestren junto a un campo específico, en lugar de simplemente en la parte superior del formulario.

Este proceso funciona especificando uno o más métodos ``Callback``, cada uno de los cuales se llama durante el proceso de validación. Cada uno de estos métodos puede hacer cualquier cosa, incluyendo la creación y asignación de errores de validación.

.. note::

    Un método retrollamado en sí no *falla* o devuelve cualquier valor. En su lugar, como verás en el ejemplo, un método retrollamado tiene la posibilidad de agregar "violaciones" de validación directamente.

+----------------+------------------------------------------------------------------------+
| Aplica a       | :ref:`clase<validation-class-target>`                                  |
+----------------+------------------------------------------------------------------------+
| Opciones       | - `methods`_                                                           |
+----------------+------------------------------------------------------------------------+
| Clase          | :class:`Symfony\\Component\\Validator\\Constraints\\Callback`          |
+----------------+------------------------------------------------------------------------+
| Validador      | :class:`Symfony\\Component\\Validator\\Constraints\\CallbackValidator` |
+----------------+------------------------------------------------------------------------+

Configurando
------------

.. configuration-block::

    .. code-block:: yaml

        # src/Acme/BlogBundle/Resources/config/validation.yml
        Acme\BlogBundle\Entity\Author:
            constraints:
                - Callback:
                    methods:   [isAuthorValid]

    .. code-block:: php-annotations

        // src/Acme/BlogBundle/Entity/Author.php
        namespace Acme\BlogBundle\Entity;

        use Symfony\Component\Validator\Constraints as Assert;

        /**
         * @Assert\Callback(methods={"isAuthorValid"})
         */
        class Author
        {
        }

    .. code-block:: xml

        <!-- src/Acme/BlogBundle/Resources/config/validation.xml -->
        <class name="Acme\BlogBundle\Entity\Author">
            <constraint name="Callback">
                <option name="methods">
                    <value>isAuthorValid</value>
                </option>
            </constraint>
        </class>

    .. code-block:: php

        // src/Acme/BlogBundle/Entity/Author.php
        namespace Acme\BlogBundle\Entity;

        use Symfony\Component\Validator\Mapping\ClassMetadata;
        use Symfony\Component\Validator\Constraints as Assert;

        class Autor
        {
            public static function loadValidatorMetadata(ClassMetadata $metadata)
            {
                $metadata->addConstraint(new Assert\Callback(array(
                    'methods' => array('isAuthorValid'),
                )));
            }
        }

El método ``Callback``
----------------------

Al método ``callback`` se le pasa un objeto ``ExecutionContext`` especial. Puedes establecer ``"violaciones"`` directamente en el objeto y determinar a qué campo de deben atribuir estos errores::

    // ...
    use Symfony\Component\Validator\ExecutionContext;
    
    class Author
    {
        // ...
        private $firstName;
    
        public function isAuthorValid(ExecutionContext $context)
        {
            // de alguna manera hay un arreglo de "nombres ficticios"
            $fakeNames = array();
        
            // comprueba si el nombre en realidad es un nombre ficticio
            if (in_array($this->getFirstName(), $fakeNames)) {
                $context->addViolationAtSubPath('firstname', 'This name sounds totally fake!', array(), null);
            }
        }
    }

Opciones
--------

``methods``
~~~~~~~~~~~

**tipo**: ``array`` **predeterminado**: ``array()`` [:ref:`opción predeterminada <validation-default-option>`]

Este es un arreglo de los métodos que se deben ejecutar durante el proceso de validación. Cada método puede tener uno de los siguientes formatos:

1) **Cadena de nombre del método**

    Si el nombre de un método es una cadena simple (por ejemplo, ``isAuthorValid``), ese método será llamado en el mismo objeto que se está validando y ``ExecutionContext`` será el único argumento (ve el ejemplo anterior).

2) **Arreglo estático de retrollamada**

    También puedes especificar cada método como un arreglo de retrollamada estándar:

    .. configuration-block::

        .. code-block:: yaml

            # src/Acme/BlogBundle/Resources/config/validation.yml
            Acme\BlogBundle\Entity\Author:
                constraints:
                    - Callback:
                        methods:
                            -    [Acme\BlogBundle\MyStaticValidatorClass, isAuthorValid]

        .. code-block:: php-annotations

            // src/Acme/BlogBundle/Entity/Author.php
            use Symfony\Component\Validator\Constraints as Assert;

            /**
             * @Assert\Callback(methods={
             *     { "Acme\BlogBundle\MyStaticValidatorClass", "isAuthorValid"}
             * })
             */
            class Author
            {
            }

        .. code-block:: php

            // src/Acme/BlogBundle/Entity/Author.php

            use Symfony\Component\Validator\Mapping\ClassMetadata;
            use Symfony\Component\Validator\Constraints\Callback;

            class Author
            {
                public $name;

                public static function loadValidatorMetadata(ClassMetadata $metadata)
                {
                    $metadata->addConstraint(new Callback(array(
                        'methods' => array('isAuthorValid'),
                    )));
                }
            }

    En este caso, el método estático ``isAuthorValid`` será llamado en la clase ``Acme\BlogBundle\MyStaticValidatorClass``. Este se pasa tanto al objeto original que se está validando (por ejemplo, ``Autor``), así como a ``ExecutionContext``::

        namespace Acme\BlogBundle;
    
        use Symfony\Component\Validator\ExecutionContext;
        use Acme\BlogBundle\Entity\Author;
    
        class MyStaticValidatorClass
        {
            static public function isAuthorValid(Author $author, ExecutionContext $context)
            {
                // ...
            }
        }

    .. tip::

        Si especificas la restricción ``Retrollamada`` a través de *PHP*, entonces también tienes la opción de hacer tu retrollamada o bien un cierre *PHP* o una retrollamada no estática. Esto *no* es posible actualmente, sin embargo, para especificar un :term:`servicio` como una restricción. Para validar usando un servicio, debes :doc:`crear una restricción de validación personalizada </cookbook/validation/custom_constraint>` y añadir la nueva restricción a tu clase.
