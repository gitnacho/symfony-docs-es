:orphan:

Glosario
========

.. glossary::
   :sorted:

   Distribución
        Una *distribución* es un paquete hecho de componentes *Symfony2*, una selección de paquetes, una sensible estructura de directorios, una configuración predeterminada y opcionalmente un sistema de configuración.

   Proyecto
        Un *proyecto* es un directorio compuesto por una aplicación, un conjunto de paquetes, bibliotecas de proveedores, un cargador automático, y un archivo controlador frontal web.

   Aplicación
        Una *aplicación* es un directorio que contiene la *configuración* para un determinado conjunto de paquetes.

   Paquete
        Un *paquete* o *bundle* es un directorio que contiene un conjunto de archivos (archivos *PHP*, hojas de estilo, *JavaScript*, imágenes, ...) que *implementan* una sola característica (un *blog*, un foro, etc.) En *Symfony2*, (*casi*) todo vive dentro de un paquete. (consulta :ref:`page-creation-bundles`)

   Controlador frontal
        Un *controlador frontal* es un pequeño archivo *PHP* que vive en el directorio web de tu proyecto. Típicamente, *todas* las peticiones se manejan ejecutando el mismo controlador frontal, cuyo trabajo es arrancar la aplicación *Symfony*.

   Controlador
        Un *controlador* es una función *PHP* que alberga toda la lógica necesaria para devolver un objeto ``Respuesta`` el cual representa una página en particular.
        Normalmente, una ruta se asigna a un controlador, el cual a su vez, utiliza los datos de la petición para procesar información, realizar acciones, y, finalmente, construir y devolver un objeto ``Respuesta``.

   Servicio
        Un *servicio* es un término genérico para cualquier objeto *PHP* que realiza una tarea específica. Un servicio generalmente se utiliza «globalmente», tal como un objeto de conexión a base de datos o un objeto que envía mensajes de correo electrónico. En *Symfony2*, los servicios a menudo se configuran y recuperan desde el contenedor del servicio.
        Una aplicación que tiene muchos servicios disociados se dice que sigue una `arquitectura orientada a servicios`_.

   Contenedor de servicios
        Un *contenedor de servicios*, también conocido como *contenedor de inyección de dependencias*, es un objeto especial que gestiona la creación de instancias de servicios dentro de una aplicación. En lugar de crear servicios directamente, el desarrollador *prepara* el contenedor de servicios (vía configuración) sobre cómo crear los servicios. El contenedor de servicios se encarga de iniciar instancias e inyectar los servicios dependientes. Ve el capítulo :doc:`/book/service_container`.

   Especificación *HTTP*
        La *especificación HTTP* es un documento que describe el *Hypertext Transfer Protocol* ---un conjunto de normas para la clásica comunicación cliente--servidor vía petición--respuesta. La especificación define el formato utilizado para la petición y respuesta, así como las posibles cabeceras *HTTP* que cada una puede tener. Para más información, lee `HTTP en Wikipedia`_ o el artículo `HTTP 1.1 RFC`_.

   Entorno
       El entorno es una cadena (por ejemplo, ``prod`` o ``dev``) que corresponde a un conjunto de configuración específico. La misma aplicación puede ejecutarse en la misma máquina utilizando diferente configuración, ejecutando la aplicación en diferentes entornos. Esto es útil ya que permite que una única petición tenga un entorno de desarrollo ``dev`` construido para la depuración y un  entorno de producción ``prod`` optimizado para velocidad.

   Vendedor
        Un *vendedor* es un proveedor de bibliotecas y paquetes *PHP* incluyendo al mismo *Symfony2*. A pesar de la connotación comercial de la palabra, a menudo, vendedores en *Symfony* (aunque por lo general) es software libre. Cualquier biblioteca que agregues a tu proyecto *Symfony2* debe ir en el directorio ``vendor``. Consulta :ref:`Arquitectura: Usando vendors <using-vendors>`.

   Acme
        *Acme* es el nombre de una empresa ficticia utilizado en las demostraciones y documentación de *Symfony*.
        Se utiliza como un espacio de nombres donde normalmente se utiliza el nombre de tu propia empresa (por ejemplo, ``Acme\BlogBundle``).

   Acción
        Una *acción* es una función *PHP* o método que se ejecuta, por ejemplo, cuando corresponde una determinada ruta. El término acción es sinónimo de *controlador*, aunque un controlador también se puede referir a toda una clase *PHP* que incluye varias acciones. Consulta el capítulo :doc:`Controlador </book/controller>`.

   Activo
        Un *activo* es cualquier componente estático, no ejecutable de una aplicación web, incluyendo *CSS*, *JavaScript*, imágenes y video. Los activos se pueden colocar directamente en el directorio ``web`` del proyecto, o publicarse desde un :term:`Paquete` al directorio web, utilizando la tarea de consola ``assets:install``.

   Kernel
        El ``Kernel`` es el núcleo de *Symfony2*. El objeto ``núcleo`` controla las peticiones *HTTP* utilizando todos los paquetes y bibliotecas registrados en él. Consulta :ref:`Arquitectura: El directorio app <the-app-dir>` y el capítulo :doc:`/book/internals`.

   Cortafuegos
        En *Symfony2*, un *cortafuegos* no tiene que ver con la creación de redes. En su lugar, este define los mecanismos de autenticación (es decir, maneja el proceso de determinar la identidad de los usuarios), ya sea para toda la aplicación o sólo para una parte de ella. Consulta el capítulo sobre :doc:`/book/security`.

   *YAML*
        *YAML* es un acrónimo recursivo para "*YAML* Ain't a Markup Language". Es un lenguaje de serialización de datos ligero, humanamente legible utilizado extensivamente en los archivos de configuración de *Symfony2*.  Ve el capítulo :doc:`/components/yaml/introduction`.


.. _`arquitectura orientada a servicios`: http://wikipedia.org/wiki/Service-oriented_architecture
.. _`HTTP en Wikipedia`: http://es.wikipedia.org/wiki/Hypertext_Transfer_Protocol
.. _`HTTP 1.1 RFC`: http://www.w3.org/Protocols/rfc2616/rfc2616.html
